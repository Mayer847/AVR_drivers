
Poject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000642  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000642  000006d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080006c  0080006c  000006e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000714  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001baa  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000adf  00000000  00000000  0000248a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fa9  00000000  00000000  00002f69  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000037c  00000000  00000000  00003f14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000603  00000000  00000000  00004290  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f87  00000000  00000000  00004893  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  0000581a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e4       	ldi	r30, 0x42	; 66
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 36       	cpi	r26, 0x6F	; 111
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 56 00 	call	0xac	; 0xac <main>
  8a:	0c 94 1f 03 	jmp	0x63e	; 0x63e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <EXTIO_counter>:
		
	}
}
static u8 counter=0;
void EXTIO_counter(){
	LCD_voidPrintStr("INTERRUPT0:");
  92:	80 e6       	ldi	r24, 0x60	; 96
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_voidPrintStr>
	if(get_KP()=='+')
	{
		counter++;
	}
	LCD_voidCls();*/
	counter++;
  9a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
  9e:	8f 5f       	subi	r24, 0xFF	; 255
  a0:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
	LCD_voidPrintNum(counter);
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_voidPrintNum>
  aa:	08 95       	ret

000000ac <main>:
void EXTIO_counter();
void EXTI0_reset();
int main(void)
{
	/*call back function*/
	callback_pointer(&EXTIO_counter);
  ac:	89 e4       	ldi	r24, 0x49	; 73
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <callback_pointer>

	/*initializing lcd & keypad			*/
	init_LCD();
  b4:	0e 94 cb 00 	call	0x196	; 0x196 <init_LCD>
	init_KP();
  b8:	0e 94 ac 01 	call	0x358	; 0x358 <init_KP>
	
	//Setting SP7 pin to 1 in SREG
	gie_enable();//GLOBAL GIE, PREFERAL, FLAG
  bc:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <gie_enable>
	//LCD_voidPrintStr("test1");
	//_delay_ms(1000);
	init_inti0();
  c0:	0e 94 d5 02 	call	0x5aa	; 0x5aa <init_inti0>
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <main+0x18>

000000c6 <LCD_voidEN>:
	LCD_voidCommand(0x28);
	LCD_voidCommand(0x0c);

}
void LCD_voidEN(){
	Dio_voidSetPinValue(EN_PORT,EN_PIN,HIGH);//PORT_A,PIN2
  c6:	41 e0       	ldi	r20, 0x01	; 1
  c8:	62 e0       	ldi	r22, 0x02	; 2
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	0e 94 5f 02 	call	0x4be	; 0x4be <Dio_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	86 e7       	ldi	r24, 0x76	; 118
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <LCD_voidEN+0x10>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <LCD_voidEN+0x1a>
  e0:	00 00       	nop
	_delay_ms(30);
	Dio_voidSetPinValue(EN_PORT,EN_PIN,LOW);
  e2:	40 e0       	ldi	r20, 0x00	; 0
  e4:	62 e0       	ldi	r22, 0x02	; 2
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	0e 94 5f 02 	call	0x4be	; 0x4be <Dio_voidSetPinValue>
  ec:	8f e9       	ldi	r24, 0x9F	; 159
  ee:	9f e0       	ldi	r25, 0x0F	; 15
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <LCD_voidEN+0x2a>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <LCD_voidEN+0x30>
  f6:	00 00       	nop
  f8:	08 95       	ret

000000fa <LCD_voidRS>:
	_delay_ms(1);
}

void LCD_voidRS(u8 STATE){ //state is either COMMAND OR DATA
	Dio_voidSetPinValue(RS_PORT,RS_PIN,STATE);//low for command high for data
  fa:	48 2f       	mov	r20, r24
  fc:	63 e0       	ldi	r22, 0x03	; 3
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	0e 94 5f 02 	call	0x4be	; 0x4be <Dio_voidSetPinValue>
 104:	08 95       	ret

00000106 <LCD_voidCommand>:
}

void LCD_voidCommand(u8 cmd){
 106:	cf 93       	push	r28
 108:	c8 2f       	mov	r28, r24
	
	//RS=0
	LCD_voidRS(COMMAND);
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_voidRS>
	Dio_voidSetPinValue(EN_PORT,EN_PIN,LOW);
 110:	40 e0       	ldi	r20, 0x00	; 0
 112:	62 e0       	ldi	r22, 0x02	; 2
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	0e 94 5f 02 	call	0x4be	; 0x4be <Dio_voidSetPinValue>
	//write values
	Dio_voidSetPinValue(LCD_PORT,D7_PIN,(cmd>>7)&1);
 11a:	4c 2f       	mov	r20, r28
 11c:	44 1f       	adc	r20, r20
 11e:	44 27       	eor	r20, r20
 120:	44 1f       	adc	r20, r20
 122:	64 e0       	ldi	r22, 0x04	; 4
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	0e 94 5f 02 	call	0x4be	; 0x4be <Dio_voidSetPinValue>
	Dio_voidSetPinValue(LCD_PORT,D6_PIN,(cmd>>6)&1);
 12a:	c6 fb       	bst	r28, 6
 12c:	44 27       	eor	r20, r20
 12e:	40 f9       	bld	r20, 0
 130:	62 e0       	ldi	r22, 0x02	; 2
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	0e 94 5f 02 	call	0x4be	; 0x4be <Dio_voidSetPinValue>
	Dio_voidSetPinValue(LCD_PORT,D5_PIN,(cmd>>5)&1);
 138:	c5 fb       	bst	r28, 5
 13a:	44 27       	eor	r20, r20
 13c:	40 f9       	bld	r20, 0
 13e:	61 e0       	ldi	r22, 0x01	; 1
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 5f 02 	call	0x4be	; 0x4be <Dio_voidSetPinValue>
	Dio_voidSetPinValue(LCD_PORT,D4_PIN,(cmd>>4)&1);
 146:	c4 fb       	bst	r28, 4
 148:	44 27       	eor	r20, r20
 14a:	40 f9       	bld	r20, 0
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	0e 94 5f 02 	call	0x4be	; 0x4be <Dio_voidSetPinValue>
		
	//Enable writing EN
	LCD_voidEN();
 154:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_voidEN>
	
	Dio_voidSetPinValue(LCD_PORT,D7_PIN,(cmd>>3)&1);
 158:	c3 fb       	bst	r28, 3
 15a:	44 27       	eor	r20, r20
 15c:	40 f9       	bld	r20, 0
 15e:	64 e0       	ldi	r22, 0x04	; 4
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	0e 94 5f 02 	call	0x4be	; 0x4be <Dio_voidSetPinValue>
	Dio_voidSetPinValue(LCD_PORT,D6_PIN,(cmd>>2)&1);
 166:	c2 fb       	bst	r28, 2
 168:	44 27       	eor	r20, r20
 16a:	40 f9       	bld	r20, 0
 16c:	62 e0       	ldi	r22, 0x02	; 2
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	0e 94 5f 02 	call	0x4be	; 0x4be <Dio_voidSetPinValue>
	Dio_voidSetPinValue(LCD_PORT,D5_PIN,(cmd>>1)&1);
 174:	c1 fb       	bst	r28, 1
 176:	44 27       	eor	r20, r20
 178:	40 f9       	bld	r20, 0
 17a:	61 e0       	ldi	r22, 0x01	; 1
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 5f 02 	call	0x4be	; 0x4be <Dio_voidSetPinValue>
	Dio_voidSetPinValue(LCD_PORT,D4_PIN,(cmd>>0)&1);
 182:	4c 2f       	mov	r20, r28
 184:	41 70       	andi	r20, 0x01	; 1
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	0e 94 5f 02 	call	0x4be	; 0x4be <Dio_voidSetPinValue>
	//Enable writing EN
	LCD_voidEN();
 18e:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_voidEN>
}
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <init_LCD>:
//#include <string.h>
//#include "../../../../Avr32/01_MCAL/01_DIO/Dio_interface.h"

void init_LCD(void){
	//set pin direction:(OUTPUT)
	Dio_voidSetPinDirection(LCD_PORT,D7_PIN,OUTPUT);
 196:	41 e0       	ldi	r20, 0x01	; 1
 198:	64 e0       	ldi	r22, 0x04	; 4
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Dio_voidSetPinDirection>
	Dio_voidSetPinDirection(LCD_PORT,D6_PIN,OUTPUT);
 1a0:	41 e0       	ldi	r20, 0x01	; 1
 1a2:	62 e0       	ldi	r22, 0x02	; 2
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Dio_voidSetPinDirection>
	Dio_voidSetPinDirection(LCD_PORT,D5_PIN,OUTPUT);
 1aa:	41 e0       	ldi	r20, 0x01	; 1
 1ac:	61 e0       	ldi	r22, 0x01	; 1
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Dio_voidSetPinDirection>
	Dio_voidSetPinDirection(LCD_PORT,D4_PIN,OUTPUT);
 1b4:	41 e0       	ldi	r20, 0x01	; 1
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Dio_voidSetPinDirection>
	Dio_voidSetPinDirection(EN_PORT,EN_PIN,OUTPUT);
 1be:	41 e0       	ldi	r20, 0x01	; 1
 1c0:	62 e0       	ldi	r22, 0x02	; 2
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Dio_voidSetPinDirection>
	Dio_voidSetPinDirection(RS_PORT,RS_PIN,OUTPUT);
 1c8:	41 e0       	ldi	r20, 0x01	; 1
 1ca:	63 e0       	ldi	r22, 0x03	; 3
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Dio_voidSetPinDirection>
 1d2:	2f e7       	ldi	r18, 0x7F	; 127
 1d4:	83 e8       	ldi	r24, 0x83	; 131
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	21 50       	subi	r18, 0x01	; 1
 1da:	80 40       	sbci	r24, 0x00	; 0
 1dc:	90 40       	sbci	r25, 0x00	; 0
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <init_LCD+0x42>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <init_LCD+0x4c>
 1e2:	00 00       	nop
	_delay_ms(31);
	//0x02-return home -0x28-to define mode 4 bits -0x0c-display on cursor off,0x01-clear screan-
	LCD_voidCommand(0x33);
 1e4:	83 e3       	ldi	r24, 0x33	; 51
 1e6:	0e 94 83 00 	call	0x106	; 0x106 <LCD_voidCommand>
 1ea:	8f e3       	ldi	r24, 0x3F	; 63
 1ec:	9c e9       	ldi	r25, 0x9C	; 156
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <init_LCD+0x58>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <init_LCD+0x5e>
 1f4:	00 00       	nop
	_delay_ms(10);
	LCD_voidCommand(0x32);
 1f6:	82 e3       	ldi	r24, 0x32	; 50
 1f8:	0e 94 83 00 	call	0x106	; 0x106 <LCD_voidCommand>
 1fc:	8f e3       	ldi	r24, 0x3F	; 63
 1fe:	9c e9       	ldi	r25, 0x9C	; 156
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <init_LCD+0x6a>
 204:	00 c0       	rjmp	.+0      	; 0x206 <init_LCD+0x70>
 206:	00 00       	nop
	_delay_ms(10);
	LCD_voidCommand(0x28);
 208:	88 e2       	ldi	r24, 0x28	; 40
 20a:	0e 94 83 00 	call	0x106	; 0x106 <LCD_voidCommand>
	LCD_voidCommand(0x0c);
 20e:	8c e0       	ldi	r24, 0x0C	; 12
 210:	0e 94 83 00 	call	0x106	; 0x106 <LCD_voidCommand>
 214:	08 95       	ret

00000216 <LCD_voidWriteData>:
	Dio_voidSetPinValue(LCD_PORT,D5_PIN,(cmd>>1)&1);
	Dio_voidSetPinValue(LCD_PORT,D4_PIN,(cmd>>0)&1);
	//Enable writing EN
	LCD_voidEN();
}
void LCD_voidWriteData(u8 data){
 216:	cf 93       	push	r28
 218:	c8 2f       	mov	r28, r24
	//RS=1
	LCD_voidRS(DATA);
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_voidRS>
	Dio_voidSetPinValue(EN_PORT,EN_PIN,LOW);
 220:	40 e0       	ldi	r20, 0x00	; 0
 222:	62 e0       	ldi	r22, 0x02	; 2
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	0e 94 5f 02 	call	0x4be	; 0x4be <Dio_voidSetPinValue>
	//write values
	Dio_voidSetPinValue(LCD_PORT,D7_PIN,(data>>7)&1);
 22a:	4c 2f       	mov	r20, r28
 22c:	44 1f       	adc	r20, r20
 22e:	44 27       	eor	r20, r20
 230:	44 1f       	adc	r20, r20
 232:	64 e0       	ldi	r22, 0x04	; 4
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	0e 94 5f 02 	call	0x4be	; 0x4be <Dio_voidSetPinValue>
	Dio_voidSetPinValue(LCD_PORT,D6_PIN,(data>>6)&1);
 23a:	c6 fb       	bst	r28, 6
 23c:	44 27       	eor	r20, r20
 23e:	40 f9       	bld	r20, 0
 240:	62 e0       	ldi	r22, 0x02	; 2
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	0e 94 5f 02 	call	0x4be	; 0x4be <Dio_voidSetPinValue>
	Dio_voidSetPinValue(LCD_PORT,D5_PIN,(data>>5)&1);
 248:	c5 fb       	bst	r28, 5
 24a:	44 27       	eor	r20, r20
 24c:	40 f9       	bld	r20, 0
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	0e 94 5f 02 	call	0x4be	; 0x4be <Dio_voidSetPinValue>
	Dio_voidSetPinValue(LCD_PORT,D4_PIN,(data>>4)&1);
 256:	c4 fb       	bst	r28, 4
 258:	44 27       	eor	r20, r20
 25a:	40 f9       	bld	r20, 0
 25c:	60 e0       	ldi	r22, 0x00	; 0
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	0e 94 5f 02 	call	0x4be	; 0x4be <Dio_voidSetPinValue>
	//Enable writing EN
	LCD_voidEN();
 264:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_voidEN>
	
	Dio_voidSetPinValue(LCD_PORT,D7_PIN,(data>>3)&1);
 268:	c3 fb       	bst	r28, 3
 26a:	44 27       	eor	r20, r20
 26c:	40 f9       	bld	r20, 0
 26e:	64 e0       	ldi	r22, 0x04	; 4
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	0e 94 5f 02 	call	0x4be	; 0x4be <Dio_voidSetPinValue>
	Dio_voidSetPinValue(LCD_PORT,D6_PIN,(data>>2)&1);
 276:	c2 fb       	bst	r28, 2
 278:	44 27       	eor	r20, r20
 27a:	40 f9       	bld	r20, 0
 27c:	62 e0       	ldi	r22, 0x02	; 2
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	0e 94 5f 02 	call	0x4be	; 0x4be <Dio_voidSetPinValue>
	Dio_voidSetPinValue(LCD_PORT,D5_PIN,(data>>1)&1);
 284:	c1 fb       	bst	r28, 1
 286:	44 27       	eor	r20, r20
 288:	40 f9       	bld	r20, 0
 28a:	61 e0       	ldi	r22, 0x01	; 1
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	0e 94 5f 02 	call	0x4be	; 0x4be <Dio_voidSetPinValue>
	Dio_voidSetPinValue(LCD_PORT,D4_PIN,(data>>0)&1);
 292:	4c 2f       	mov	r20, r28
 294:	41 70       	andi	r20, 0x01	; 1
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	0e 94 5f 02 	call	0x4be	; 0x4be <Dio_voidSetPinValue>
	//Enable writing EN
	LCD_voidEN();
 29e:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_voidEN>
}
 2a2:	cf 91       	pop	r28
 2a4:	08 95       	ret

000002a6 <LCD_voidPrintStr>:

void LCD_voidPrintStr(u8 *input){
 2a6:	0f 93       	push	r16
 2a8:	1f 93       	push	r17
 2aa:	cf 93       	push	r28
 2ac:	8c 01       	movw	r16, r24
	for(u8 i=0;input[i]!='\0';i++){
 2ae:	c0 e0       	ldi	r28, 0x00	; 0
 2b0:	03 c0       	rjmp	.+6      	; 0x2b8 <LCD_voidPrintStr+0x12>
		LCD_voidWriteData(input[i]);
 2b2:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_voidWriteData>
	//Enable writing EN
	LCD_voidEN();
}

void LCD_voidPrintStr(u8 *input){
	for(u8 i=0;input[i]!='\0';i++){
 2b6:	cf 5f       	subi	r28, 0xFF	; 255
 2b8:	f8 01       	movw	r30, r16
 2ba:	ec 0f       	add	r30, r28
 2bc:	f1 1d       	adc	r31, r1
 2be:	80 81       	ld	r24, Z
 2c0:	81 11       	cpse	r24, r1
 2c2:	f7 cf       	rjmp	.-18     	; 0x2b2 <LCD_voidPrintStr+0xc>
		LCD_voidWriteData(input[i]);
	}
}
 2c4:	cf 91       	pop	r28
 2c6:	1f 91       	pop	r17
 2c8:	0f 91       	pop	r16
 2ca:	08 95       	ret

000002cc <LCD_voidPrintNum>:

void LCD_voidPrintNum(s16 int_input){
 2cc:	0f 93       	push	r16
 2ce:	1f 93       	push	r17
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	cd b7       	in	r28, 0x3d	; 61
 2d6:	de b7       	in	r29, 0x3e	; 62
 2d8:	2a 97       	sbiw	r28, 0x0a	; 10
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	f8 94       	cli
 2de:	de bf       	out	0x3e, r29	; 62
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	cd bf       	out	0x3d, r28	; 61
	/*init_LCD();
	LCD_voidCls();*/
	s16 temp=int_input, i, j;
	char numStr[10] = "";
 2e4:	1a 82       	std	Y+2, r1	; 0x02
 2e6:	19 82       	std	Y+1, r1	; 0x01
 2e8:	fe 01       	movw	r30, r28
 2ea:	33 96       	adiw	r30, 0x03	; 3
 2ec:	28 e0       	ldi	r18, 0x08	; 8
 2ee:	df 01       	movw	r26, r30
 2f0:	1d 92       	st	X+, r1
 2f2:	2a 95       	dec	r18
 2f4:	e9 f7       	brne	.-6      	; 0x2f0 <LCD_voidPrintNum+0x24>
	for(i=0;temp>0;i++){
 2f6:	00 e0       	ldi	r16, 0x00	; 0
 2f8:	10 e0       	ldi	r17, 0x00	; 0
 2fa:	10 c0       	rjmp	.+32     	; 0x31c <LCD_voidPrintNum+0x50>
		numStr[i] = (temp%10) + '0';//strlen(numStr)
 2fc:	6a e0       	ldi	r22, 0x0A	; 10
 2fe:	70 e0       	ldi	r23, 0x00	; 0
 300:	0e 94 f7 02 	call	0x5ee	; 0x5ee <__divmodhi4>
 304:	e1 e0       	ldi	r30, 0x01	; 1
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	ec 0f       	add	r30, r28
 30a:	fd 1f       	adc	r31, r29
 30c:	e0 0f       	add	r30, r16
 30e:	f1 1f       	adc	r31, r17
 310:	80 5d       	subi	r24, 0xD0	; 208
 312:	80 83       	st	Z, r24
		//LCD_voidWriteData(temp%10 + '0');
		temp/=10;
 314:	86 2f       	mov	r24, r22
 316:	97 2f       	mov	r25, r23
void LCD_voidPrintNum(s16 int_input){
	/*init_LCD();
	LCD_voidCls();*/
	s16 temp=int_input, i, j;
	char numStr[10] = "";
	for(i=0;temp>0;i++){
 318:	0f 5f       	subi	r16, 0xFF	; 255
 31a:	1f 4f       	sbci	r17, 0xFF	; 255
 31c:	18 16       	cp	r1, r24
 31e:	19 06       	cpc	r1, r25
 320:	6c f3       	brlt	.-38     	; 0x2fc <LCD_voidPrintNum+0x30>
		numStr[i] = (temp%10) + '0';//strlen(numStr)
		//LCD_voidWriteData(temp%10 + '0');
		temp/=10;
		//LCD_voidWriteData(i+'0');
	}
	for(j=i-1;j>=0;j--){
 322:	01 50       	subi	r16, 0x01	; 1
 324:	11 09       	sbc	r17, r1
 326:	0b c0       	rjmp	.+22     	; 0x33e <LCD_voidPrintNum+0x72>
		LCD_voidWriteData(numStr[j]);
 328:	e1 e0       	ldi	r30, 0x01	; 1
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	ec 0f       	add	r30, r28
 32e:	fd 1f       	adc	r31, r29
 330:	e0 0f       	add	r30, r16
 332:	f1 1f       	adc	r31, r17
 334:	80 81       	ld	r24, Z
 336:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_voidWriteData>
		numStr[i] = (temp%10) + '0';//strlen(numStr)
		//LCD_voidWriteData(temp%10 + '0');
		temp/=10;
		//LCD_voidWriteData(i+'0');
	}
	for(j=i-1;j>=0;j--){
 33a:	01 50       	subi	r16, 0x01	; 1
 33c:	11 09       	sbc	r17, r1
 33e:	11 23       	and	r17, r17
 340:	9c f7       	brge	.-26     	; 0x328 <LCD_voidPrintNum+0x5c>
		LCD_voidWriteData(numStr[j]);
	}
}
 342:	2a 96       	adiw	r28, 0x0a	; 10
 344:	0f b6       	in	r0, 0x3f	; 63
 346:	f8 94       	cli
 348:	de bf       	out	0x3e, r29	; 62
 34a:	0f be       	out	0x3f, r0	; 63
 34c:	cd bf       	out	0x3d, r28	; 61
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	1f 91       	pop	r17
 354:	0f 91       	pop	r16
 356:	08 95       	ret

00000358 <init_KP>:
	'1','2'
}*/
void init_KP(){
	// dir of pins dir of output and input high, define pins, pull up resistor in input
	//define COL direction
	Dio_voidSetPinDirection(COL,C1,INPUT);
 358:	40 e0       	ldi	r20, 0x00	; 0
 35a:	67 e0       	ldi	r22, 0x07	; 7
 35c:	83 e0       	ldi	r24, 0x03	; 3
 35e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Dio_voidSetPinDirection>
	Dio_voidSetPinDirection(COL,C2,INPUT);
 362:	40 e0       	ldi	r20, 0x00	; 0
 364:	66 e0       	ldi	r22, 0x06	; 6
 366:	83 e0       	ldi	r24, 0x03	; 3
 368:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Dio_voidSetPinDirection>
	Dio_voidSetPinDirection(COL,C3,INPUT);
 36c:	40 e0       	ldi	r20, 0x00	; 0
 36e:	65 e0       	ldi	r22, 0x05	; 5
 370:	83 e0       	ldi	r24, 0x03	; 3
 372:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Dio_voidSetPinDirection>
	Dio_voidSetPinDirection(COL,C4,INPUT);
 376:	40 e0       	ldi	r20, 0x00	; 0
 378:	63 e0       	ldi	r22, 0x03	; 3
 37a:	83 e0       	ldi	r24, 0x03	; 3
 37c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Dio_voidSetPinDirection>
	//define ROW direction
	Dio_voidSetPinDirection(ROW,R1,OUTPUT);
 380:	41 e0       	ldi	r20, 0x01	; 1
 382:	65 e0       	ldi	r22, 0x05	; 5
 384:	82 e0       	ldi	r24, 0x02	; 2
 386:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Dio_voidSetPinDirection>
	Dio_voidSetPinDirection(ROW,R2,OUTPUT);
 38a:	41 e0       	ldi	r20, 0x01	; 1
 38c:	64 e0       	ldi	r22, 0x04	; 4
 38e:	82 e0       	ldi	r24, 0x02	; 2
 390:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Dio_voidSetPinDirection>
	Dio_voidSetPinDirection(ROW,R3,OUTPUT);
 394:	41 e0       	ldi	r20, 0x01	; 1
 396:	63 e0       	ldi	r22, 0x03	; 3
 398:	82 e0       	ldi	r24, 0x02	; 2
 39a:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Dio_voidSetPinDirection>
	Dio_voidSetPinDirection(ROW,R4,OUTPUT);
 39e:	41 e0       	ldi	r20, 0x01	; 1
 3a0:	62 e0       	ldi	r22, 0x02	; 2
 3a2:	82 e0       	ldi	r24, 0x02	; 2
 3a4:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Dio_voidSetPinDirection>
	//set ROW OUTPUT AS HIGH
	Dio_voidSetPinValue(COL,C1,HIGH);
 3a8:	41 e0       	ldi	r20, 0x01	; 1
 3aa:	67 e0       	ldi	r22, 0x07	; 7
 3ac:	83 e0       	ldi	r24, 0x03	; 3
 3ae:	0e 94 5f 02 	call	0x4be	; 0x4be <Dio_voidSetPinValue>
	Dio_voidSetPinValue(COL,C2,HIGH);
 3b2:	41 e0       	ldi	r20, 0x01	; 1
 3b4:	66 e0       	ldi	r22, 0x06	; 6
 3b6:	83 e0       	ldi	r24, 0x03	; 3
 3b8:	0e 94 5f 02 	call	0x4be	; 0x4be <Dio_voidSetPinValue>
	Dio_voidSetPinValue(COL,C3,HIGH);
 3bc:	41 e0       	ldi	r20, 0x01	; 1
 3be:	65 e0       	ldi	r22, 0x05	; 5
 3c0:	83 e0       	ldi	r24, 0x03	; 3
 3c2:	0e 94 5f 02 	call	0x4be	; 0x4be <Dio_voidSetPinValue>
	Dio_voidSetPinValue(COL,C4,HIGH);
 3c6:	41 e0       	ldi	r20, 0x01	; 1
 3c8:	63 e0       	ldi	r22, 0x03	; 3
 3ca:	83 e0       	ldi	r24, 0x03	; 3
 3cc:	0e 94 5f 02 	call	0x4be	; 0x4be <Dio_voidSetPinValue>
 3d0:	08 95       	ret

000003d2 <Dio_voidSetPinDirection>:
#include "Dio_interface.h"
#include "Dio_private.h"


void Dio_voidSetPinDirection(u8 PORTID, u8 PINID, u8 Direction){
	if((PORTID< 4) && (PINID<8) ){
 3d2:	84 30       	cpi	r24, 0x04	; 4
 3d4:	08 f0       	brcs	.+2      	; 0x3d8 <Dio_voidSetPinDirection+0x6>
 3d6:	72 c0       	rjmp	.+228    	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 3d8:	68 30       	cpi	r22, 0x08	; 8
 3da:	08 f0       	brcs	.+2      	; 0x3de <Dio_voidSetPinDirection+0xc>
 3dc:	6f c0       	rjmp	.+222    	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
		if(Direction == OUTPUT){
 3de:	41 30       	cpi	r20, 0x01	; 1
 3e0:	a1 f5       	brne	.+104    	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
			switch(PORTID)
 3e2:	81 30       	cpi	r24, 0x01	; 1
 3e4:	89 f0       	breq	.+34     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3e6:	28 f0       	brcs	.+10     	; 0x3f2 <Dio_voidSetPinDirection+0x20>
 3e8:	82 30       	cpi	r24, 0x02	; 2
 3ea:	c9 f0       	breq	.+50     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 3ec:	83 30       	cpi	r24, 0x03	; 3
 3ee:	11 f1       	breq	.+68     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 3f0:	08 95       	ret
			{
				case PORT_A : SET_BIT(DDRA_REG,PINID); break;
 3f2:	2a b3       	in	r18, 0x1a	; 26
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <Dio_voidSetPinDirection+0x2c>
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	6a 95       	dec	r22
 400:	e2 f7       	brpl	.-8      	; 0x3fa <Dio_voidSetPinDirection+0x28>
 402:	82 2b       	or	r24, r18
 404:	8a bb       	out	0x1a, r24	; 26
 406:	08 95       	ret
				case PORT_B : SET_BIT(DDRB_REG,PINID); break;
 408:	27 b3       	in	r18, 0x17	; 23
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	02 c0       	rjmp	.+4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	6a 95       	dec	r22
 416:	e2 f7       	brpl	.-8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 418:	82 2b       	or	r24, r18
 41a:	87 bb       	out	0x17, r24	; 23
 41c:	08 95       	ret
				case PORT_C : SET_BIT(DDRC_REG,PINID); break;
 41e:	24 b3       	in	r18, 0x14	; 20
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	02 c0       	rjmp	.+4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	6a 95       	dec	r22
 42c:	e2 f7       	brpl	.-8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 42e:	82 2b       	or	r24, r18
 430:	84 bb       	out	0x14, r24	; 20
 432:	08 95       	ret
				case PORT_D : SET_BIT(DDRD_REG,PINID); break;
 434:	21 b3       	in	r18, 0x11	; 17
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	02 c0       	rjmp	.+4      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 43c:	88 0f       	add	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	6a 95       	dec	r22
 442:	e2 f7       	brpl	.-8      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 444:	82 2b       	or	r24, r18
 446:	81 bb       	out	0x11, r24	; 17
 448:	08 95       	ret
			}
		}
		else if(Direction == INPUT){
 44a:	41 11       	cpse	r20, r1
 44c:	37 c0       	rjmp	.+110    	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
			switch(PORTID)
 44e:	81 30       	cpi	r24, 0x01	; 1
 450:	91 f0       	breq	.+36     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 452:	28 f0       	brcs	.+10     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 454:	82 30       	cpi	r24, 0x02	; 2
 456:	d9 f0       	breq	.+54     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 458:	83 30       	cpi	r24, 0x03	; 3
 45a:	29 f1       	breq	.+74     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 45c:	08 95       	ret
			{
				case PORT_A : CLR_BIT(DDRA_REG,PINID); break;
 45e:	2a b3       	in	r18, 0x1a	; 26
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	02 c0       	rjmp	.+4      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 466:	88 0f       	add	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	6a 95       	dec	r22
 46c:	e2 f7       	brpl	.-8      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 46e:	80 95       	com	r24
 470:	82 23       	and	r24, r18
 472:	8a bb       	out	0x1a, r24	; 26
 474:	08 95       	ret
				case PORT_B : CLR_BIT(DDRB_REG,PINID); break;
 476:	27 b3       	in	r18, 0x17	; 23
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	02 c0       	rjmp	.+4      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 47e:	88 0f       	add	r24, r24
 480:	99 1f       	adc	r25, r25
 482:	6a 95       	dec	r22
 484:	e2 f7       	brpl	.-8      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 486:	80 95       	com	r24
 488:	82 23       	and	r24, r18
 48a:	87 bb       	out	0x17, r24	; 23
 48c:	08 95       	ret
				case PORT_C : CLR_BIT(DDRC_REG,PINID); break;
 48e:	24 b3       	in	r18, 0x14	; 20
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	02 c0       	rjmp	.+4      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 496:	88 0f       	add	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	6a 95       	dec	r22
 49c:	e2 f7       	brpl	.-8      	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 49e:	80 95       	com	r24
 4a0:	82 23       	and	r24, r18
 4a2:	84 bb       	out	0x14, r24	; 20
 4a4:	08 95       	ret
				case PORT_D : CLR_BIT(DDRD_REG,PINID); break;
 4a6:	21 b3       	in	r18, 0x11	; 17
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 4ae:	88 0f       	add	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	6a 95       	dec	r22
 4b4:	e2 f7       	brpl	.-8      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 4b6:	80 95       	com	r24
 4b8:	82 23       	and	r24, r18
 4ba:	81 bb       	out	0x11, r24	; 17
 4bc:	08 95       	ret

000004be <Dio_voidSetPinValue>:
		}else{/* Direction Error */}
	}else{/* Error Out of Range */}
}

void Dio_voidSetPinValue(u8 PORTID, u8 PINID, u8 Value){
	if((PORTID< 4) && (PINID<8) ){
 4be:	84 30       	cpi	r24, 0x04	; 4
 4c0:	08 f0       	brcs	.+2      	; 0x4c4 <Dio_voidSetPinValue+0x6>
 4c2:	72 c0       	rjmp	.+228    	; 0x5a8 <Dio_voidSetPinValue+0xea>
 4c4:	68 30       	cpi	r22, 0x08	; 8
 4c6:	08 f0       	brcs	.+2      	; 0x4ca <Dio_voidSetPinValue+0xc>
 4c8:	6f c0       	rjmp	.+222    	; 0x5a8 <Dio_voidSetPinValue+0xea>
		if(Value==HIGH){
 4ca:	41 30       	cpi	r20, 0x01	; 1
 4cc:	a1 f5       	brne	.+104    	; 0x536 <Dio_voidSetPinValue+0x78>
			switch(PORTID)
 4ce:	81 30       	cpi	r24, 0x01	; 1
 4d0:	89 f0       	breq	.+34     	; 0x4f4 <Dio_voidSetPinValue+0x36>
 4d2:	28 f0       	brcs	.+10     	; 0x4de <Dio_voidSetPinValue+0x20>
 4d4:	82 30       	cpi	r24, 0x02	; 2
 4d6:	c9 f0       	breq	.+50     	; 0x50a <Dio_voidSetPinValue+0x4c>
 4d8:	83 30       	cpi	r24, 0x03	; 3
 4da:	11 f1       	breq	.+68     	; 0x520 <Dio_voidSetPinValue+0x62>
 4dc:	08 95       	ret
			{
				case PORT_A : SET_BIT(PORTA_REG,PINID);break;
 4de:	2b b3       	in	r18, 0x1b	; 27
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <Dio_voidSetPinValue+0x2c>
 4e6:	88 0f       	add	r24, r24
 4e8:	99 1f       	adc	r25, r25
 4ea:	6a 95       	dec	r22
 4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <Dio_voidSetPinValue+0x28>
 4ee:	82 2b       	or	r24, r18
 4f0:	8b bb       	out	0x1b, r24	; 27
 4f2:	08 95       	ret
				case PORT_B : SET_BIT(PORTB_REG,PINID);break;
 4f4:	28 b3       	in	r18, 0x18	; 24
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <Dio_voidSetPinValue+0x42>
 4fc:	88 0f       	add	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	6a 95       	dec	r22
 502:	e2 f7       	brpl	.-8      	; 0x4fc <Dio_voidSetPinValue+0x3e>
 504:	82 2b       	or	r24, r18
 506:	88 bb       	out	0x18, r24	; 24
 508:	08 95       	ret
				case PORT_C : SET_BIT(PORTC_REG,PINID);break;
 50a:	25 b3       	in	r18, 0x15	; 21
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	02 c0       	rjmp	.+4      	; 0x516 <Dio_voidSetPinValue+0x58>
 512:	88 0f       	add	r24, r24
 514:	99 1f       	adc	r25, r25
 516:	6a 95       	dec	r22
 518:	e2 f7       	brpl	.-8      	; 0x512 <Dio_voidSetPinValue+0x54>
 51a:	82 2b       	or	r24, r18
 51c:	85 bb       	out	0x15, r24	; 21
 51e:	08 95       	ret
				case PORT_D : SET_BIT(PORTD_REG,PINID);break;
 520:	22 b3       	in	r18, 0x12	; 18
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	02 c0       	rjmp	.+4      	; 0x52c <Dio_voidSetPinValue+0x6e>
 528:	88 0f       	add	r24, r24
 52a:	99 1f       	adc	r25, r25
 52c:	6a 95       	dec	r22
 52e:	e2 f7       	brpl	.-8      	; 0x528 <Dio_voidSetPinValue+0x6a>
 530:	82 2b       	or	r24, r18
 532:	82 bb       	out	0x12, r24	; 18
 534:	08 95       	ret
			}
		}else if(Value==LOW){
 536:	41 11       	cpse	r20, r1
 538:	37 c0       	rjmp	.+110    	; 0x5a8 <Dio_voidSetPinValue+0xea>
			switch(PORTID)
 53a:	81 30       	cpi	r24, 0x01	; 1
 53c:	91 f0       	breq	.+36     	; 0x562 <Dio_voidSetPinValue+0xa4>
 53e:	28 f0       	brcs	.+10     	; 0x54a <Dio_voidSetPinValue+0x8c>
 540:	82 30       	cpi	r24, 0x02	; 2
 542:	d9 f0       	breq	.+54     	; 0x57a <Dio_voidSetPinValue+0xbc>
 544:	83 30       	cpi	r24, 0x03	; 3
 546:	29 f1       	breq	.+74     	; 0x592 <Dio_voidSetPinValue+0xd4>
 548:	08 95       	ret
			{
				case PORT_A : CLR_BIT(PORTA_REG,PINID);break;
 54a:	2b b3       	in	r18, 0x1b	; 27
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	02 c0       	rjmp	.+4      	; 0x556 <Dio_voidSetPinValue+0x98>
 552:	88 0f       	add	r24, r24
 554:	99 1f       	adc	r25, r25
 556:	6a 95       	dec	r22
 558:	e2 f7       	brpl	.-8      	; 0x552 <Dio_voidSetPinValue+0x94>
 55a:	80 95       	com	r24
 55c:	82 23       	and	r24, r18
 55e:	8b bb       	out	0x1b, r24	; 27
 560:	08 95       	ret
				case PORT_B : CLR_BIT(PORTB_REG,PINID);break;
 562:	28 b3       	in	r18, 0x18	; 24
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	02 c0       	rjmp	.+4      	; 0x56e <Dio_voidSetPinValue+0xb0>
 56a:	88 0f       	add	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	6a 95       	dec	r22
 570:	e2 f7       	brpl	.-8      	; 0x56a <Dio_voidSetPinValue+0xac>
 572:	80 95       	com	r24
 574:	82 23       	and	r24, r18
 576:	88 bb       	out	0x18, r24	; 24
 578:	08 95       	ret
				case PORT_C : CLR_BIT(PORTC_REG,PINID);break;
 57a:	25 b3       	in	r18, 0x15	; 21
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	02 c0       	rjmp	.+4      	; 0x586 <Dio_voidSetPinValue+0xc8>
 582:	88 0f       	add	r24, r24
 584:	99 1f       	adc	r25, r25
 586:	6a 95       	dec	r22
 588:	e2 f7       	brpl	.-8      	; 0x582 <Dio_voidSetPinValue+0xc4>
 58a:	80 95       	com	r24
 58c:	82 23       	and	r24, r18
 58e:	85 bb       	out	0x15, r24	; 21
 590:	08 95       	ret
				case PORT_D : CLR_BIT(PORTD_REG,PINID);break;
 592:	22 b3       	in	r18, 0x12	; 18
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	02 c0       	rjmp	.+4      	; 0x59e <Dio_voidSetPinValue+0xe0>
 59a:	88 0f       	add	r24, r24
 59c:	99 1f       	adc	r25, r25
 59e:	6a 95       	dec	r22
 5a0:	e2 f7       	brpl	.-8      	; 0x59a <Dio_voidSetPinValue+0xdc>
 5a2:	80 95       	com	r24
 5a4:	82 23       	and	r24, r18
 5a6:	82 bb       	out	0x12, r24	; 18
 5a8:	08 95       	ret

000005aa <init_inti0>:
		case ANY:CLR_BIT(MCUCSR,PIN1);
			 SET_BIT(MCUCSR,PIN0);break;
		case FALL:SET_BIT(MCUCSR,PIN1);
			 CLR_BIT(MCUCSR,PIN0);break;
		case RISE:SET_BIT(MCUCSR,PIN1);
			 SET_BIT(MCUCSR,PIN0);break;
 5aa:	40 e0       	ldi	r20, 0x00	; 0
 5ac:	62 e0       	ldi	r22, 0x02	; 2
 5ae:	83 e0       	ldi	r24, 0x03	; 3
 5b0:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Dio_voidSetPinDirection>
 5b4:	41 e0       	ldi	r20, 0x01	; 1
 5b6:	62 e0       	ldi	r22, 0x02	; 2
 5b8:	83 e0       	ldi	r24, 0x03	; 3
 5ba:	0e 94 5f 02 	call	0x4be	; 0x4be <Dio_voidSetPinValue>
 5be:	85 b7       	in	r24, 0x35	; 53
 5c0:	82 60       	ori	r24, 0x02	; 2
 5c2:	85 bf       	out	0x35, r24	; 53
 5c4:	85 b7       	in	r24, 0x35	; 53
 5c6:	8e 7f       	andi	r24, 0xFE	; 254
 5c8:	85 bf       	out	0x35, r24	; 53
 5ca:	85 b7       	in	r24, 0x35	; 53
 5cc:	80 64       	ori	r24, 0x40	; 64
 5ce:	85 bf       	out	0x35, r24	; 53
 5d0:	8a b7       	in	r24, 0x3a	; 58
 5d2:	80 64       	ori	r24, 0x40	; 64
 5d4:	8a bf       	out	0x3a, r24	; 58
 5d6:	08 95       	ret

000005d8 <callback_pointer>:
	}
}
//static *pointer;
void callback_pointer(void (*function_name)(void))
{
	if (function_name!= NULL)
 5d8:	00 97       	sbiw	r24, 0x00	; 0
 5da:	21 f0       	breq	.+8      	; 0x5e4 <callback_pointer+0xc>
	{
			pf=function_name;
 5dc:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <pf+0x1>
 5e0:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <pf>
 5e4:	08 95       	ret

000005e6 <gie_enable>:
#include "../../LIB/STD_TYPES.h"
#include "../../LIB/BIT_MATH.h"
#include "GIE_config.h"
#include "GIE_private.h"
void gie_enable(){
	SET_BIT(S_REG,7);
 5e6:	8f b7       	in	r24, 0x3f	; 63
 5e8:	80 68       	ori	r24, 0x80	; 128
 5ea:	8f bf       	out	0x3f, r24	; 63
 5ec:	08 95       	ret

000005ee <__divmodhi4>:
 5ee:	97 fb       	bst	r25, 7
 5f0:	07 2e       	mov	r0, r23
 5f2:	16 f4       	brtc	.+4      	; 0x5f8 <__divmodhi4+0xa>
 5f4:	00 94       	com	r0
 5f6:	07 d0       	rcall	.+14     	; 0x606 <__divmodhi4_neg1>
 5f8:	77 fd       	sbrc	r23, 7
 5fa:	09 d0       	rcall	.+18     	; 0x60e <__divmodhi4_neg2>
 5fc:	0e 94 0b 03 	call	0x616	; 0x616 <__udivmodhi4>
 600:	07 fc       	sbrc	r0, 7
 602:	05 d0       	rcall	.+10     	; 0x60e <__divmodhi4_neg2>
 604:	3e f4       	brtc	.+14     	; 0x614 <__divmodhi4_exit>

00000606 <__divmodhi4_neg1>:
 606:	90 95       	com	r25
 608:	81 95       	neg	r24
 60a:	9f 4f       	sbci	r25, 0xFF	; 255
 60c:	08 95       	ret

0000060e <__divmodhi4_neg2>:
 60e:	70 95       	com	r23
 610:	61 95       	neg	r22
 612:	7f 4f       	sbci	r23, 0xFF	; 255

00000614 <__divmodhi4_exit>:
 614:	08 95       	ret

00000616 <__udivmodhi4>:
 616:	aa 1b       	sub	r26, r26
 618:	bb 1b       	sub	r27, r27
 61a:	51 e1       	ldi	r21, 0x11	; 17
 61c:	07 c0       	rjmp	.+14     	; 0x62c <__udivmodhi4_ep>

0000061e <__udivmodhi4_loop>:
 61e:	aa 1f       	adc	r26, r26
 620:	bb 1f       	adc	r27, r27
 622:	a6 17       	cp	r26, r22
 624:	b7 07       	cpc	r27, r23
 626:	10 f0       	brcs	.+4      	; 0x62c <__udivmodhi4_ep>
 628:	a6 1b       	sub	r26, r22
 62a:	b7 0b       	sbc	r27, r23

0000062c <__udivmodhi4_ep>:
 62c:	88 1f       	adc	r24, r24
 62e:	99 1f       	adc	r25, r25
 630:	5a 95       	dec	r21
 632:	a9 f7       	brne	.-22     	; 0x61e <__udivmodhi4_loop>
 634:	80 95       	com	r24
 636:	90 95       	com	r25
 638:	bc 01       	movw	r22, r24
 63a:	cd 01       	movw	r24, r26
 63c:	08 95       	ret

0000063e <_exit>:
 63e:	f8 94       	cli

00000640 <__stop_program>:
 640:	ff cf       	rjmp	.-2      	; 0x640 <__stop_program>
