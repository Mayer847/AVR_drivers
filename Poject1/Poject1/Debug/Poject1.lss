
Poject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000b08  00000b9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800070  00800070  00000bac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bdc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022bb  00000000  00000000  00000e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e27  00000000  00000000  0000313b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015c5  00000000  00000000  00003f62  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005b0  00000000  00000000  00005528  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007c6  00000000  00000000  00005ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013b3  00000000  00000000  0000629e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  00007651  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 39 00 	jmp	0x72	; 0x72 <__ctors_end>
   4:	0c 94 30 04 	jmp	0x860	; 0x860 <__vector_1>
   8:	0c 94 76 04 	jmp	0x8ec	; 0x8ec <__vector_2>
   c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  10:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  14:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  18:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  1c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  24:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  28:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  2c:	0c 94 2d 05 	jmp	0xa5a	; 0xa5a <__vector_11>
  30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  34:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  40:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__vector_16>
  44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  54:	d1 04       	cpc	r13, r1
  56:	d5 04       	cpc	r13, r5
  58:	da 04       	cpc	r13, r10
  5a:	df 04       	cpc	r13, r15
  5c:	e4 04       	cpc	r14, r4
  5e:	e9 04       	cpc	r14, r9
  60:	ee 04       	cpc	r14, r14
  62:	f3 04       	cpc	r15, r3
  64:	0a 05       	cpc	r16, r10
  66:	0e 05       	cpc	r16, r14
  68:	12 05       	cpc	r17, r2
  6a:	16 05       	cpc	r17, r6
  6c:	1a 05       	cpc	r17, r10
  6e:	1e 05       	cpc	r17, r14
  70:	22 05       	cpc	r18, r2

00000072 <__ctors_end>:
  72:	11 24       	eor	r1, r1
  74:	1f be       	out	0x3f, r1	; 63
  76:	cf e5       	ldi	r28, 0x5F	; 95
  78:	d8 e0       	ldi	r29, 0x08	; 8
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_copy_data>:
  7e:	10 e0       	ldi	r17, 0x00	; 0
  80:	a0 e6       	ldi	r26, 0x60	; 96
  82:	b0 e0       	ldi	r27, 0x00	; 0
  84:	e8 e0       	ldi	r30, 0x08	; 8
  86:	fb e0       	ldi	r31, 0x0B	; 11
  88:	02 c0       	rjmp	.+4      	; 0x8e <__do_copy_data+0x10>
  8a:	05 90       	lpm	r0, Z+
  8c:	0d 92       	st	X+, r0
  8e:	a0 37       	cpi	r26, 0x70	; 112
  90:	b1 07       	cpc	r27, r17
  92:	d9 f7       	brne	.-10     	; 0x8a <__do_copy_data+0xc>

00000094 <__do_clear_bss>:
  94:	20 e0       	ldi	r18, 0x00	; 0
  96:	a0 e7       	ldi	r26, 0x70	; 112
  98:	b0 e0       	ldi	r27, 0x00	; 0
  9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
  9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
  9e:	ab 37       	cpi	r26, 0x7B	; 123
  a0:	b2 07       	cpc	r27, r18
  a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>
  a4:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  a8:	0c 94 82 05 	jmp	0xb04	; 0xb04 <_exit>

000000ac <__bad_interrupt>:
  ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <led_tmr>:
	_delay_ms(200);
}

void led_tmr()
{
	tmr_count++;
  b0:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
  b4:	8f 5f       	subi	r24, 0xFF	; 255
  b6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
  ba:	08 95       	ret

000000bc <EXTI1_counter>:
}

void EXTI1_counter()
{
	cntFlag=1;
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <cntFlag>
  c2:	08 95       	ret

000000c4 <main>:
int main(void)
{
/**************** SETTING PIN DIRECTION **********/

	/*LED*/
	Dio_voidSetPinDirection(PORT_A,PIN4,OUTPUT);
  c4:	41 e0       	ldi	r20, 0x01	; 1
  c6:	64 e0       	ldi	r22, 0x04	; 4
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	0e 94 0e 03 	call	0x61c	; 0x61c <Dio_voidSetPinDirection>
	
	/*LDR*/
	Dio_voidSetPinDirection(PORT_A,PIN0,INPUT);
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	60 e0       	ldi	r22, 0x00	; 0
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	0e 94 0e 03 	call	0x61c	; 0x61c <Dio_voidSetPinDirection>
	
/**************** INITIALIZATION ****************/

	/*LCD & keypad*/
	init_LCD();
  d8:	0e 94 27 01 	call	0x24e	; 0x24e <init_LCD>
	init_KP();
  dc:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <init_KP>
	
	/*ADC*/
	init_ADC(1,0);
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	0e 94 b6 02 	call	0x56c	; 0x56c <init_ADC>
	
	/*TIMER*/
	init_timer(NORMAL,PRS1024);
  e8:	65 e0       	ldi	r22, 0x05	; 5
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	0e 94 a1 04 	call	0x942	; 0x942 <init_timer>

/******************* INTERRUPTS ******************/	

/*Enable all interrupts*/
	gie_enable();//GLOBAL GIE, PREFERAL, FLAG, Setting SP7 pin to 1 in SREG	
  f0:	0e 94 9d 04 	call	0x93a	; 0x93a <gie_enable>
	
/*external interrupts*/
	
	/*init_inti0();*/
	init_inti1();
  f4:	0e 94 57 04 	call	0x8ae	; 0x8ae <init_inti1>
	
/*ADC interrupts*/
	ADCI_EN();
  f8:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ADCI_EN>
	
/*call back functions*/
	callback_tmr(&led_tmr);
  fc:	88 e5       	ldi	r24, 0x58	; 88
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 26 05 	call	0xa4c	; 0xa4c <callback_tmr>
	callback_exti1(&EXTI1_counter);
 104:	8e e5       	ldi	r24, 0x5E	; 94
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 6f 04 	call	0x8de	; 0x8de <callback_exti1>

	
/*enabling GICR for interrupts*/
	
	/*EXTI0_en();*/	//H.W***********
	EXTI1_en();
 10c:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <EXTI1_en>
/* ADC polling */ //H.W
	/*LCD_voidPrintNum(ADC_read(ADC0));*/
	
/* interrupt 1 counter '+' switch(Row 4, col 4)*/
	while(1){
		if(cntFlag==1){
 110:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <cntFlag>
 114:	81 30       	cpi	r24, 0x01	; 1
 116:	f1 f4       	brne	.+60     	; 0x154 <main+0x90>
			temp=get_KP();
 118:	0e 94 36 02 	call	0x46c	; 0x46c <get_KP>
			if(temp=='+')
 11c:	8b 32       	cpi	r24, 0x2B	; 43
 11e:	59 f4       	brne	.+22     	; 0x136 <main+0x72>
			{
				LCD_voidCls();
 120:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_voidCls>
				counter++;
 124:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <counter>
 128:	8f 5f       	subi	r24, 0xFF	; 255
 12a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <counter>
				LCD_voidPrintNum(counter);
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_voidPrintNum>
 134:	0f c0       	rjmp	.+30     	; 0x154 <main+0x90>
			}
/* start timer with external interrupt one using '*' switch */
			else if (temp == '*')
 136:	8a 32       	cpi	r24, 0x2A	; 42
 138:	21 f4       	brne	.+8      	; 0x142 <main+0x7e>
			{
				Timer_start(PRS1024);
 13a:	85 e0       	ldi	r24, 0x05	; 5
 13c:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <Timer_start>
 140:	09 c0       	rjmp	.+18     	; 0x154 <main+0x90>
			}
			else if (temp== '/')
 142:	8f 32       	cpi	r24, 0x2F	; 47
 144:	39 f4       	brne	.+14     	; 0x154 <main+0x90>
			{
				Dio_voidSetPinValue(PORT_A,PIN4,LOW);
 146:	40 e0       	ldi	r20, 0x00	; 0
 148:	64 e0       	ldi	r22, 0x04	; 4
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	0e 94 84 03 	call	0x708	; 0x708 <Dio_voidSetPinValue>
				Timer_stop();
 150:	0e 94 f7 04 	call	0x9ee	; 0x9ee <Timer_stop>
			}
		}
		
/* Timer LED Toggle every 1 second */
		if(tmr_count==61){
 154:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 158:	8d 33       	cpi	r24, 0x3D	; 61
 15a:	29 f4       	brne	.+10     	; 0x166 <main+0xa2>
			Dio_voidSetPinValue(PORT_A,PIN4,HIGH);
 15c:	41 e0       	ldi	r20, 0x01	; 1
 15e:	64 e0       	ldi	r22, 0x04	; 4
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	0e 94 84 03 	call	0x708	; 0x708 <Dio_voidSetPinValue>
		}
		if(tmr_count==122){
 166:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 16a:	8a 37       	cpi	r24, 0x7A	; 122
 16c:	89 f6       	brne	.-94     	; 0x110 <main+0x4c>
			tmr_count=0;
 16e:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__data_end>
			Dio_voidSetPinValue(PORT_A,PIN4,LOW);
 172:	40 e0       	ldi	r20, 0x00	; 0
 174:	64 e0       	ldi	r22, 0x04	; 4
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	0e 94 84 03 	call	0x708	; 0x708 <Dio_voidSetPinValue>
 17c:	c9 cf       	rjmp	.-110    	; 0x110 <main+0x4c>

0000017e <LCD_voidEN>:

void LCD_voidPrintStr(s8 *input){
	for(u8 i=0;input[i]!='\0';i++){
		LCD_voidWriteData(input[i]);
	}
}
 17e:	41 e0       	ldi	r20, 0x01	; 1
 180:	62 e0       	ldi	r22, 0x02	; 2
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	0e 94 84 03 	call	0x708	; 0x708 <Dio_voidSetPinValue>
 188:	2f ef       	ldi	r18, 0xFF	; 255
 18a:	86 e7       	ldi	r24, 0x76	; 118
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	21 50       	subi	r18, 0x01	; 1
 190:	80 40       	sbci	r24, 0x00	; 0
 192:	90 40       	sbci	r25, 0x00	; 0
 194:	e1 f7       	brne	.-8      	; 0x18e <LCD_voidEN+0x10>
 196:	00 c0       	rjmp	.+0      	; 0x198 <LCD_voidEN+0x1a>
 198:	00 00       	nop
 19a:	40 e0       	ldi	r20, 0x00	; 0
 19c:	62 e0       	ldi	r22, 0x02	; 2
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	0e 94 84 03 	call	0x708	; 0x708 <Dio_voidSetPinValue>
 1a4:	8f e9       	ldi	r24, 0x9F	; 159
 1a6:	9f e0       	ldi	r25, 0x0F	; 15
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <LCD_voidEN+0x2a>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <LCD_voidEN+0x30>
 1ae:	00 00       	nop
 1b0:	08 95       	ret

000001b2 <LCD_voidRS>:
 1b2:	48 2f       	mov	r20, r24
 1b4:	63 e0       	ldi	r22, 0x03	; 3
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	0e 94 84 03 	call	0x708	; 0x708 <Dio_voidSetPinValue>
 1bc:	08 95       	ret

000001be <LCD_voidCommand>:
 1be:	cf 93       	push	r28
 1c0:	c8 2f       	mov	r28, r24
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_voidRS>
 1c8:	40 e0       	ldi	r20, 0x00	; 0
 1ca:	62 e0       	ldi	r22, 0x02	; 2
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	0e 94 84 03 	call	0x708	; 0x708 <Dio_voidSetPinValue>
 1d2:	4c 2f       	mov	r20, r28
 1d4:	44 1f       	adc	r20, r20
 1d6:	44 27       	eor	r20, r20
 1d8:	44 1f       	adc	r20, r20
 1da:	64 e0       	ldi	r22, 0x04	; 4
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 84 03 	call	0x708	; 0x708 <Dio_voidSetPinValue>
 1e2:	c6 fb       	bst	r28, 6
 1e4:	44 27       	eor	r20, r20
 1e6:	40 f9       	bld	r20, 0
 1e8:	62 e0       	ldi	r22, 0x02	; 2
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	0e 94 84 03 	call	0x708	; 0x708 <Dio_voidSetPinValue>
 1f0:	c5 fb       	bst	r28, 5
 1f2:	44 27       	eor	r20, r20
 1f4:	40 f9       	bld	r20, 0
 1f6:	61 e0       	ldi	r22, 0x01	; 1
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	0e 94 84 03 	call	0x708	; 0x708 <Dio_voidSetPinValue>
 1fe:	c4 fb       	bst	r28, 4
 200:	44 27       	eor	r20, r20
 202:	40 f9       	bld	r20, 0
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	0e 94 84 03 	call	0x708	; 0x708 <Dio_voidSetPinValue>
 20c:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_voidEN>
 210:	c3 fb       	bst	r28, 3
 212:	44 27       	eor	r20, r20
 214:	40 f9       	bld	r20, 0
 216:	64 e0       	ldi	r22, 0x04	; 4
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	0e 94 84 03 	call	0x708	; 0x708 <Dio_voidSetPinValue>
 21e:	c2 fb       	bst	r28, 2
 220:	44 27       	eor	r20, r20
 222:	40 f9       	bld	r20, 0
 224:	62 e0       	ldi	r22, 0x02	; 2
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	0e 94 84 03 	call	0x708	; 0x708 <Dio_voidSetPinValue>
 22c:	c1 fb       	bst	r28, 1
 22e:	44 27       	eor	r20, r20
 230:	40 f9       	bld	r20, 0
 232:	61 e0       	ldi	r22, 0x01	; 1
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	0e 94 84 03 	call	0x708	; 0x708 <Dio_voidSetPinValue>
 23a:	4c 2f       	mov	r20, r28
 23c:	41 70       	andi	r20, 0x01	; 1
 23e:	60 e0       	ldi	r22, 0x00	; 0
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	0e 94 84 03 	call	0x708	; 0x708 <Dio_voidSetPinValue>
 246:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_voidEN>
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <init_LCD>:
 24e:	41 e0       	ldi	r20, 0x01	; 1
 250:	64 e0       	ldi	r22, 0x04	; 4
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	0e 94 0e 03 	call	0x61c	; 0x61c <Dio_voidSetPinDirection>
 258:	41 e0       	ldi	r20, 0x01	; 1
 25a:	62 e0       	ldi	r22, 0x02	; 2
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	0e 94 0e 03 	call	0x61c	; 0x61c <Dio_voidSetPinDirection>
 262:	41 e0       	ldi	r20, 0x01	; 1
 264:	61 e0       	ldi	r22, 0x01	; 1
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	0e 94 0e 03 	call	0x61c	; 0x61c <Dio_voidSetPinDirection>
 26c:	41 e0       	ldi	r20, 0x01	; 1
 26e:	60 e0       	ldi	r22, 0x00	; 0
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	0e 94 0e 03 	call	0x61c	; 0x61c <Dio_voidSetPinDirection>
 276:	41 e0       	ldi	r20, 0x01	; 1
 278:	62 e0       	ldi	r22, 0x02	; 2
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	0e 94 0e 03 	call	0x61c	; 0x61c <Dio_voidSetPinDirection>
 280:	41 e0       	ldi	r20, 0x01	; 1
 282:	63 e0       	ldi	r22, 0x03	; 3
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	0e 94 0e 03 	call	0x61c	; 0x61c <Dio_voidSetPinDirection>
 28a:	2f e7       	ldi	r18, 0x7F	; 127
 28c:	83 e8       	ldi	r24, 0x83	; 131
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	21 50       	subi	r18, 0x01	; 1
 292:	80 40       	sbci	r24, 0x00	; 0
 294:	90 40       	sbci	r25, 0x00	; 0
 296:	e1 f7       	brne	.-8      	; 0x290 <init_LCD+0x42>
 298:	00 c0       	rjmp	.+0      	; 0x29a <init_LCD+0x4c>
 29a:	00 00       	nop
 29c:	83 e3       	ldi	r24, 0x33	; 51
 29e:	0e 94 df 00 	call	0x1be	; 0x1be <LCD_voidCommand>
 2a2:	8f e3       	ldi	r24, 0x3F	; 63
 2a4:	9c e9       	ldi	r25, 0x9C	; 156
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <init_LCD+0x58>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <init_LCD+0x5e>
 2ac:	00 00       	nop
 2ae:	82 e3       	ldi	r24, 0x32	; 50
 2b0:	0e 94 df 00 	call	0x1be	; 0x1be <LCD_voidCommand>
 2b4:	8f e3       	ldi	r24, 0x3F	; 63
 2b6:	9c e9       	ldi	r25, 0x9C	; 156
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <init_LCD+0x6a>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <init_LCD+0x70>
 2be:	00 00       	nop
 2c0:	88 e2       	ldi	r24, 0x28	; 40
 2c2:	0e 94 df 00 	call	0x1be	; 0x1be <LCD_voidCommand>
 2c6:	8c e0       	ldi	r24, 0x0C	; 12
 2c8:	0e 94 df 00 	call	0x1be	; 0x1be <LCD_voidCommand>
 2cc:	08 95       	ret

000002ce <LCD_voidWriteData>:
 2ce:	cf 93       	push	r28
 2d0:	c8 2f       	mov	r28, r24
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_voidRS>
 2d8:	40 e0       	ldi	r20, 0x00	; 0
 2da:	62 e0       	ldi	r22, 0x02	; 2
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	0e 94 84 03 	call	0x708	; 0x708 <Dio_voidSetPinValue>
 2e2:	4c 2f       	mov	r20, r28
 2e4:	44 1f       	adc	r20, r20
 2e6:	44 27       	eor	r20, r20
 2e8:	44 1f       	adc	r20, r20
 2ea:	64 e0       	ldi	r22, 0x04	; 4
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	0e 94 84 03 	call	0x708	; 0x708 <Dio_voidSetPinValue>
 2f2:	c6 fb       	bst	r28, 6
 2f4:	44 27       	eor	r20, r20
 2f6:	40 f9       	bld	r20, 0
 2f8:	62 e0       	ldi	r22, 0x02	; 2
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	0e 94 84 03 	call	0x708	; 0x708 <Dio_voidSetPinValue>
 300:	c5 fb       	bst	r28, 5
 302:	44 27       	eor	r20, r20
 304:	40 f9       	bld	r20, 0
 306:	61 e0       	ldi	r22, 0x01	; 1
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	0e 94 84 03 	call	0x708	; 0x708 <Dio_voidSetPinValue>
 30e:	c4 fb       	bst	r28, 4
 310:	44 27       	eor	r20, r20
 312:	40 f9       	bld	r20, 0
 314:	60 e0       	ldi	r22, 0x00	; 0
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	0e 94 84 03 	call	0x708	; 0x708 <Dio_voidSetPinValue>
 31c:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_voidEN>
 320:	c3 fb       	bst	r28, 3
 322:	44 27       	eor	r20, r20
 324:	40 f9       	bld	r20, 0
 326:	64 e0       	ldi	r22, 0x04	; 4
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	0e 94 84 03 	call	0x708	; 0x708 <Dio_voidSetPinValue>
 32e:	c2 fb       	bst	r28, 2
 330:	44 27       	eor	r20, r20
 332:	40 f9       	bld	r20, 0
 334:	62 e0       	ldi	r22, 0x02	; 2
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	0e 94 84 03 	call	0x708	; 0x708 <Dio_voidSetPinValue>
 33c:	c1 fb       	bst	r28, 1
 33e:	44 27       	eor	r20, r20
 340:	40 f9       	bld	r20, 0
 342:	61 e0       	ldi	r22, 0x01	; 1
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	0e 94 84 03 	call	0x708	; 0x708 <Dio_voidSetPinValue>
 34a:	4c 2f       	mov	r20, r28
 34c:	41 70       	andi	r20, 0x01	; 1
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	0e 94 84 03 	call	0x708	; 0x708 <Dio_voidSetPinValue>
 356:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_voidEN>
 35a:	cf 91       	pop	r28
 35c:	08 95       	ret

0000035e <LCD_voidPrintNum>:

void LCD_voidPrintNum(s16 int_input){
 35e:	0f 93       	push	r16
 360:	1f 93       	push	r17
 362:	cf 93       	push	r28
 364:	df 93       	push	r29
 366:	cd b7       	in	r28, 0x3d	; 61
 368:	de b7       	in	r29, 0x3e	; 62
 36a:	2a 97       	sbiw	r28, 0x0a	; 10
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	f8 94       	cli
 370:	de bf       	out	0x3e, r29	; 62
 372:	0f be       	out	0x3f, r0	; 63
 374:	cd bf       	out	0x3d, r28	; 61
	/*init_LCD();
	LCD_voidCls();*/
	s16 temp=int_input, i, j;
	char numStr[10] = "";
 376:	1a 82       	std	Y+2, r1	; 0x02
 378:	19 82       	std	Y+1, r1	; 0x01
 37a:	fe 01       	movw	r30, r28
 37c:	33 96       	adiw	r30, 0x03	; 3
 37e:	28 e0       	ldi	r18, 0x08	; 8
 380:	df 01       	movw	r26, r30
 382:	1d 92       	st	X+, r1
 384:	2a 95       	dec	r18
 386:	e9 f7       	brne	.-6      	; 0x382 <LCD_voidPrintNum+0x24>
	for(i=0;temp>0;i++){
 388:	00 e0       	ldi	r16, 0x00	; 0
 38a:	10 e0       	ldi	r17, 0x00	; 0
 38c:	10 c0       	rjmp	.+32     	; 0x3ae <LCD_voidPrintNum+0x50>
		numStr[i] = (temp%10) + '0';//strlen(numStr)
 38e:	6a e0       	ldi	r22, 0x0A	; 10
 390:	70 e0       	ldi	r23, 0x00	; 0
 392:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__divmodhi4>
 396:	e1 e0       	ldi	r30, 0x01	; 1
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	ec 0f       	add	r30, r28
 39c:	fd 1f       	adc	r31, r29
 39e:	e0 0f       	add	r30, r16
 3a0:	f1 1f       	adc	r31, r17
 3a2:	80 5d       	subi	r24, 0xD0	; 208
 3a4:	80 83       	st	Z, r24
		//LCD_voidWriteData(temp%10 + '0');
		temp/=10;
 3a6:	86 2f       	mov	r24, r22
 3a8:	97 2f       	mov	r25, r23
void LCD_voidPrintNum(s16 int_input){
	/*init_LCD();
	LCD_voidCls();*/
	s16 temp=int_input, i, j;
	char numStr[10] = "";
	for(i=0;temp>0;i++){
 3aa:	0f 5f       	subi	r16, 0xFF	; 255
 3ac:	1f 4f       	sbci	r17, 0xFF	; 255
 3ae:	18 16       	cp	r1, r24
 3b0:	19 06       	cpc	r1, r25
 3b2:	6c f3       	brlt	.-38     	; 0x38e <LCD_voidPrintNum+0x30>
		numStr[i] = (temp%10) + '0';//strlen(numStr)
		//LCD_voidWriteData(temp%10 + '0');
		temp/=10;
		//LCD_voidWriteData(i+'0');
	}
	for(j=i-1;j>=0;j--){
 3b4:	01 50       	subi	r16, 0x01	; 1
 3b6:	11 09       	sbc	r17, r1
 3b8:	0b c0       	rjmp	.+22     	; 0x3d0 <LCD_voidPrintNum+0x72>
		LCD_voidWriteData(numStr[j]);
 3ba:	e1 e0       	ldi	r30, 0x01	; 1
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	ec 0f       	add	r30, r28
 3c0:	fd 1f       	adc	r31, r29
 3c2:	e0 0f       	add	r30, r16
 3c4:	f1 1f       	adc	r31, r17
 3c6:	80 81       	ld	r24, Z
 3c8:	0e 94 67 01 	call	0x2ce	; 0x2ce <LCD_voidWriteData>
		numStr[i] = (temp%10) + '0';//strlen(numStr)
		//LCD_voidWriteData(temp%10 + '0');
		temp/=10;
		//LCD_voidWriteData(i+'0');
	}
	for(j=i-1;j>=0;j--){
 3cc:	01 50       	subi	r16, 0x01	; 1
 3ce:	11 09       	sbc	r17, r1
 3d0:	11 23       	and	r17, r17
 3d2:	9c f7       	brge	.-26     	; 0x3ba <LCD_voidPrintNum+0x5c>
		LCD_voidWriteData(numStr[j]);
	}
}
 3d4:	2a 96       	adiw	r28, 0x0a	; 10
 3d6:	0f b6       	in	r0, 0x3f	; 63
 3d8:	f8 94       	cli
 3da:	de bf       	out	0x3e, r29	; 62
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	cd bf       	out	0x3d, r28	; 61
 3e0:	df 91       	pop	r29
 3e2:	cf 91       	pop	r28
 3e4:	1f 91       	pop	r17
 3e6:	0f 91       	pop	r16
 3e8:	08 95       	ret

000003ea <LCD_voidCls>:


void LCD_voidCls(){
	LCD_voidCommand(0x01);
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	0e 94 df 00 	call	0x1be	; 0x1be <LCD_voidCommand>
 3f0:	08 95       	ret

000003f2 <init_KP>:
	'1','2'
}*/
void init_KP(){
	// dir of pins dir of output and input high, define pins, pull up resistor in input
	//define COL direction
	Dio_voidSetPinDirection(COL,C1,INPUT);
 3f2:	40 e0       	ldi	r20, 0x00	; 0
 3f4:	67 e0       	ldi	r22, 0x07	; 7
 3f6:	83 e0       	ldi	r24, 0x03	; 3
 3f8:	0e 94 0e 03 	call	0x61c	; 0x61c <Dio_voidSetPinDirection>
	Dio_voidSetPinDirection(COL,C2,INPUT);
 3fc:	40 e0       	ldi	r20, 0x00	; 0
 3fe:	66 e0       	ldi	r22, 0x06	; 6
 400:	83 e0       	ldi	r24, 0x03	; 3
 402:	0e 94 0e 03 	call	0x61c	; 0x61c <Dio_voidSetPinDirection>
	Dio_voidSetPinDirection(COL,C3,INPUT);
 406:	40 e0       	ldi	r20, 0x00	; 0
 408:	65 e0       	ldi	r22, 0x05	; 5
 40a:	83 e0       	ldi	r24, 0x03	; 3
 40c:	0e 94 0e 03 	call	0x61c	; 0x61c <Dio_voidSetPinDirection>
	Dio_voidSetPinDirection(COL,C4,INPUT);
 410:	40 e0       	ldi	r20, 0x00	; 0
 412:	63 e0       	ldi	r22, 0x03	; 3
 414:	83 e0       	ldi	r24, 0x03	; 3
 416:	0e 94 0e 03 	call	0x61c	; 0x61c <Dio_voidSetPinDirection>
	//define ROW direction
	Dio_voidSetPinDirection(ROW,R1,OUTPUT);
 41a:	41 e0       	ldi	r20, 0x01	; 1
 41c:	65 e0       	ldi	r22, 0x05	; 5
 41e:	82 e0       	ldi	r24, 0x02	; 2
 420:	0e 94 0e 03 	call	0x61c	; 0x61c <Dio_voidSetPinDirection>
	Dio_voidSetPinDirection(ROW,R2,OUTPUT);
 424:	41 e0       	ldi	r20, 0x01	; 1
 426:	64 e0       	ldi	r22, 0x04	; 4
 428:	82 e0       	ldi	r24, 0x02	; 2
 42a:	0e 94 0e 03 	call	0x61c	; 0x61c <Dio_voidSetPinDirection>
	Dio_voidSetPinDirection(ROW,R3,OUTPUT);
 42e:	41 e0       	ldi	r20, 0x01	; 1
 430:	63 e0       	ldi	r22, 0x03	; 3
 432:	82 e0       	ldi	r24, 0x02	; 2
 434:	0e 94 0e 03 	call	0x61c	; 0x61c <Dio_voidSetPinDirection>
	Dio_voidSetPinDirection(ROW,R4,OUTPUT);
 438:	41 e0       	ldi	r20, 0x01	; 1
 43a:	62 e0       	ldi	r22, 0x02	; 2
 43c:	82 e0       	ldi	r24, 0x02	; 2
 43e:	0e 94 0e 03 	call	0x61c	; 0x61c <Dio_voidSetPinDirection>
	//set ROW OUTPUT AS HIGH
	Dio_voidSetPinValue(COL,C1,HIGH);
 442:	41 e0       	ldi	r20, 0x01	; 1
 444:	67 e0       	ldi	r22, 0x07	; 7
 446:	83 e0       	ldi	r24, 0x03	; 3
 448:	0e 94 84 03 	call	0x708	; 0x708 <Dio_voidSetPinValue>
	Dio_voidSetPinValue(COL,C2,HIGH);
 44c:	41 e0       	ldi	r20, 0x01	; 1
 44e:	66 e0       	ldi	r22, 0x06	; 6
 450:	83 e0       	ldi	r24, 0x03	; 3
 452:	0e 94 84 03 	call	0x708	; 0x708 <Dio_voidSetPinValue>
	Dio_voidSetPinValue(COL,C3,HIGH);
 456:	41 e0       	ldi	r20, 0x01	; 1
 458:	65 e0       	ldi	r22, 0x05	; 5
 45a:	83 e0       	ldi	r24, 0x03	; 3
 45c:	0e 94 84 03 	call	0x708	; 0x708 <Dio_voidSetPinValue>
	Dio_voidSetPinValue(COL,C4,HIGH);
 460:	41 e0       	ldi	r20, 0x01	; 1
 462:	63 e0       	ldi	r22, 0x03	; 3
 464:	83 e0       	ldi	r24, 0x03	; 3
 466:	0e 94 84 03 	call	0x708	; 0x708 <Dio_voidSetPinValue>
 46a:	08 95       	ret

0000046c <get_KP>:
}
u8 get_KP(){
 46c:	cf 92       	push	r12
 46e:	df 92       	push	r13
 470:	ef 92       	push	r14
 472:	ff 92       	push	r15
 474:	0f 93       	push	r16
 476:	1f 93       	push	r17
 478:	cf 93       	push	r28
 47a:	df 93       	push	r29
 47c:	cd b7       	in	r28, 0x3d	; 61
 47e:	de b7       	in	r29, 0x3e	; 62
 480:	68 97       	sbiw	r28, 0x18	; 24
 482:	0f b6       	in	r0, 0x3f	; 63
 484:	f8 94       	cli
 486:	de bf       	out	0x3e, r29	; 62
 488:	0f be       	out	0x3f, r0	; 63
 48a:	cd bf       	out	0x3d, r28	; 61
	u8 ROW_ARR[4]= {R1,R2,R3,R4};
 48c:	95 e0       	ldi	r25, 0x05	; 5
 48e:	99 83       	std	Y+1, r25	; 0x01
 490:	84 e0       	ldi	r24, 0x04	; 4
 492:	8a 83       	std	Y+2, r24	; 0x02
 494:	83 e0       	ldi	r24, 0x03	; 3
 496:	8b 83       	std	Y+3, r24	; 0x03
 498:	22 e0       	ldi	r18, 0x02	; 2
 49a:	2c 83       	std	Y+4, r18	; 0x04
	u8 COL_ARR[4]= {C1,C2,C3,C4};
 49c:	27 e0       	ldi	r18, 0x07	; 7
 49e:	2d 83       	std	Y+5, r18	; 0x05
 4a0:	26 e0       	ldi	r18, 0x06	; 6
 4a2:	2e 83       	std	Y+6, r18	; 0x06
 4a4:	9f 83       	std	Y+7, r25	; 0x07
 4a6:	88 87       	std	Y+8, r24	; 0x08
	u8 ARR[4][4]=KP_ARR;
 4a8:	80 e1       	ldi	r24, 0x10	; 16
 4aa:	e0 e6       	ldi	r30, 0x60	; 96
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	de 01       	movw	r26, r28
 4b0:	19 96       	adiw	r26, 0x09	; 9
 4b2:	01 90       	ld	r0, Z+
 4b4:	0d 92       	st	X+, r0
 4b6:	8a 95       	dec	r24
 4b8:	e1 f7       	brne	.-8      	; 0x4b2 <get_KP+0x46>
	u8 kypad_val=NOT_PRESSED;
	for(int r=0;r<4;r++)
 4ba:	e1 2c       	mov	r14, r1
 4bc:	f1 2c       	mov	r15, r1
}
u8 get_KP(){
	u8 ROW_ARR[4]= {R1,R2,R3,R4};
	u8 COL_ARR[4]= {C1,C2,C3,C4};
	u8 ARR[4][4]=KP_ARR;
	u8 kypad_val=NOT_PRESSED;
 4be:	cc 24       	eor	r12, r12
 4c0:	ca 94       	dec	r12
	for(int r=0;r<4;r++)
 4c2:	3f c0       	rjmp	.+126    	; 0x542 <get_KP+0xd6>
	{
		
		//SET_PINVALUE ROW = LOW
		Dio_voidSetPinValue(ROW,ROW_ARR[r],LOW);
 4c4:	e1 e0       	ldi	r30, 0x01	; 1
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	ec 0f       	add	r30, r28
 4ca:	fd 1f       	adc	r31, r29
 4cc:	ee 0d       	add	r30, r14
 4ce:	ff 1d       	adc	r31, r15
 4d0:	d0 80       	ld	r13, Z
 4d2:	40 e0       	ldi	r20, 0x00	; 0
 4d4:	6d 2d       	mov	r22, r13
 4d6:	82 e0       	ldi	r24, 0x02	; 2
 4d8:	0e 94 84 03 	call	0x708	; 0x708 <Dio_voidSetPinValue>
		for(int c=0;c<4;c++)
 4dc:	00 e0       	ldi	r16, 0x00	; 0
 4de:	10 e0       	ldi	r17, 0x00	; 0
 4e0:	25 c0       	rjmp	.+74     	; 0x52c <get_KP+0xc0>
		    {
			if(Dio_u8GetPinValue(COL,COL_ARR[c])==LOW){
 4e2:	e5 e0       	ldi	r30, 0x05	; 5
 4e4:	f0 e0       	ldi	r31, 0x00	; 0
 4e6:	ec 0f       	add	r30, r28
 4e8:	fd 1f       	adc	r31, r29
 4ea:	e0 0f       	add	r30, r16
 4ec:	f1 1f       	adc	r31, r17
 4ee:	60 81       	ld	r22, Z
 4f0:	83 e0       	ldi	r24, 0x03	; 3
 4f2:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Dio_u8GetPinValue>
 4f6:	81 11       	cpse	r24, r1
 4f8:	17 c0       	rjmp	.+46     	; 0x528 <get_KP+0xbc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4fa:	2f ef       	ldi	r18, 0xFF	; 255
 4fc:	89 ef       	ldi	r24, 0xF9	; 249
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	21 50       	subi	r18, 0x01	; 1
 502:	80 40       	sbci	r24, 0x00	; 0
 504:	90 40       	sbci	r25, 0x00	; 0
 506:	e1 f7       	brne	.-8      	; 0x500 <get_KP+0x94>
 508:	00 c0       	rjmp	.+0      	; 0x50a <get_KP+0x9e>
 50a:	00 00       	nop
				_delay_ms(20);//for debouncing click
				kypad_val= ARR[r][c];
 50c:	f7 01       	movw	r30, r14
 50e:	ee 0f       	add	r30, r30
 510:	ff 1f       	adc	r31, r31
 512:	ee 0f       	add	r30, r30
 514:	ff 1f       	adc	r31, r31
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	8c 0f       	add	r24, r28
 51c:	9d 1f       	adc	r25, r29
 51e:	e8 0f       	add	r30, r24
 520:	f9 1f       	adc	r31, r25
 522:	e0 0f       	add	r30, r16
 524:	f1 1f       	adc	r31, r17
 526:	c0 84       	ldd	r12, Z+8	; 0x08
	for(int r=0;r<4;r++)
	{
		
		//SET_PINVALUE ROW = LOW
		Dio_voidSetPinValue(ROW,ROW_ARR[r],LOW);
		for(int c=0;c<4;c++)
 528:	0f 5f       	subi	r16, 0xFF	; 255
 52a:	1f 4f       	sbci	r17, 0xFF	; 255
 52c:	04 30       	cpi	r16, 0x04	; 4
 52e:	11 05       	cpc	r17, r1
 530:	c4 f2       	brlt	.-80     	; 0x4e2 <get_KP+0x76>
				_delay_ms(20);//for debouncing click
				kypad_val= ARR[r][c];
			}
		}
		//SET PIN VALUE ROW = HIGH
		Dio_voidSetPinValue(ROW,ROW_ARR[r],HIGH);
 532:	41 e0       	ldi	r20, 0x01	; 1
 534:	6d 2d       	mov	r22, r13
 536:	82 e0       	ldi	r24, 0x02	; 2
 538:	0e 94 84 03 	call	0x708	; 0x708 <Dio_voidSetPinValue>
u8 get_KP(){
	u8 ROW_ARR[4]= {R1,R2,R3,R4};
	u8 COL_ARR[4]= {C1,C2,C3,C4};
	u8 ARR[4][4]=KP_ARR;
	u8 kypad_val=NOT_PRESSED;
	for(int r=0;r<4;r++)
 53c:	9f ef       	ldi	r25, 0xFF	; 255
 53e:	e9 1a       	sub	r14, r25
 540:	f9 0a       	sbc	r15, r25
 542:	24 e0       	ldi	r18, 0x04	; 4
 544:	e2 16       	cp	r14, r18
 546:	f1 04       	cpc	r15, r1
 548:	0c f4       	brge	.+2      	; 0x54c <get_KP+0xe0>
 54a:	bc cf       	rjmp	.-136    	; 0x4c4 <get_KP+0x58>
		//SET PIN VALUE ROW = HIGH
		Dio_voidSetPinValue(ROW,ROW_ARR[r],HIGH);
	}
	
	return kypad_val;
}
 54c:	8c 2d       	mov	r24, r12
 54e:	68 96       	adiw	r28, 0x18	; 24
 550:	0f b6       	in	r0, 0x3f	; 63
 552:	f8 94       	cli
 554:	de bf       	out	0x3e, r29	; 62
 556:	0f be       	out	0x3f, r0	; 63
 558:	cd bf       	out	0x3d, r28	; 61
 55a:	df 91       	pop	r29
 55c:	cf 91       	pop	r28
 55e:	1f 91       	pop	r17
 560:	0f 91       	pop	r16
 562:	ff 90       	pop	r15
 564:	ef 90       	pop	r14
 566:	df 90       	pop	r13
 568:	cf 90       	pop	r12
 56a:	08 95       	ret

0000056c <init_ADC>:

void callback_ADC(void (*function_name)(void))
{
	if (function_name!= NULL)
	{
		pf_adc=function_name;
 56c:	81 30       	cpi	r24, 0x01	; 1
 56e:	59 f0       	breq	.+22     	; 0x586 <init_ADC+0x1a>
 570:	18 f0       	brcs	.+6      	; 0x578 <init_ADC+0xc>
 572:	83 30       	cpi	r24, 0x03	; 3
 574:	79 f0       	breq	.+30     	; 0x594 <init_ADC+0x28>
 576:	14 c0       	rjmp	.+40     	; 0x5a0 <init_ADC+0x34>
 578:	87 b1       	in	r24, 0x07	; 7
 57a:	8f 7b       	andi	r24, 0xBF	; 191
 57c:	87 b9       	out	0x07, r24	; 7
 57e:	87 b1       	in	r24, 0x07	; 7
 580:	8f 77       	andi	r24, 0x7F	; 127
 582:	87 b9       	out	0x07, r24	; 7
 584:	0d c0       	rjmp	.+26     	; 0x5a0 <init_ADC+0x34>
 586:	87 b1       	in	r24, 0x07	; 7
 588:	80 64       	ori	r24, 0x40	; 64
 58a:	87 b9       	out	0x07, r24	; 7
 58c:	87 b1       	in	r24, 0x07	; 7
 58e:	8f 77       	andi	r24, 0x7F	; 127
 590:	87 b9       	out	0x07, r24	; 7
 592:	06 c0       	rjmp	.+12     	; 0x5a0 <init_ADC+0x34>
 594:	87 b1       	in	r24, 0x07	; 7
 596:	80 64       	ori	r24, 0x40	; 64
 598:	87 b9       	out	0x07, r24	; 7
 59a:	87 b1       	in	r24, 0x07	; 7
 59c:	80 68       	ori	r24, 0x80	; 128
 59e:	87 b9       	out	0x07, r24	; 7
 5a0:	86 b1       	in	r24, 0x06	; 6
 5a2:	80 68       	ori	r24, 0x80	; 128
 5a4:	86 b9       	out	0x06, r24	; 6
 5a6:	86 b1       	in	r24, 0x06	; 6
 5a8:	8f 7d       	andi	r24, 0xDF	; 223
 5aa:	86 b9       	out	0x06, r24	; 6
 5ac:	86 b1       	in	r24, 0x06	; 6
 5ae:	80 61       	ori	r24, 0x10	; 16
 5b0:	86 b9       	out	0x06, r24	; 6
 5b2:	86 b1       	in	r24, 0x06	; 6
 5b4:	84 60       	ori	r24, 0x04	; 4
 5b6:	86 b9       	out	0x06, r24	; 6
 5b8:	86 b1       	in	r24, 0x06	; 6
 5ba:	82 60       	ori	r24, 0x02	; 2
 5bc:	86 b9       	out	0x06, r24	; 6
 5be:	86 b1       	in	r24, 0x06	; 6
 5c0:	81 60       	ori	r24, 0x01	; 1
 5c2:	86 b9       	out	0x06, r24	; 6
 5c4:	08 95       	ret

000005c6 <ADCI_EN>:
 5c6:	86 b1       	in	r24, 0x06	; 6
 5c8:	88 60       	ori	r24, 0x08	; 8
 5ca:	86 b9       	out	0x06, r24	; 6
 5cc:	08 95       	ret

000005ce <__vector_16>:
}

void __vector_16 (void) __attribute__((signal,used));

void __vector_16 (void)
{
 5ce:	1f 92       	push	r1
 5d0:	0f 92       	push	r0
 5d2:	0f b6       	in	r0, 0x3f	; 63
 5d4:	0f 92       	push	r0
 5d6:	11 24       	eor	r1, r1
 5d8:	2f 93       	push	r18
 5da:	3f 93       	push	r19
 5dc:	4f 93       	push	r20
 5de:	5f 93       	push	r21
 5e0:	6f 93       	push	r22
 5e2:	7f 93       	push	r23
 5e4:	8f 93       	push	r24
 5e6:	9f 93       	push	r25
 5e8:	af 93       	push	r26
 5ea:	bf 93       	push	r27
 5ec:	ef 93       	push	r30
 5ee:	ff 93       	push	r31
	
	pf_adc();
 5f0:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <pf_adc>
 5f4:	f0 91 74 00 	lds	r31, 0x0074	; 0x800074 <pf_adc+0x1>
 5f8:	09 95       	icall

}
 5fa:	ff 91       	pop	r31
 5fc:	ef 91       	pop	r30
 5fe:	bf 91       	pop	r27
 600:	af 91       	pop	r26
 602:	9f 91       	pop	r25
 604:	8f 91       	pop	r24
 606:	7f 91       	pop	r23
 608:	6f 91       	pop	r22
 60a:	5f 91       	pop	r21
 60c:	4f 91       	pop	r20
 60e:	3f 91       	pop	r19
 610:	2f 91       	pop	r18
 612:	0f 90       	pop	r0
 614:	0f be       	out	0x3f, r0	; 63
 616:	0f 90       	pop	r0
 618:	1f 90       	pop	r1
 61a:	18 95       	reti

0000061c <Dio_voidSetPinDirection>:
#include "Dio_interface.h"
#include "Dio_private.h"


void Dio_voidSetPinDirection(u8 PORTID, u8 PINID, u8 Direction){
	if((PORTID< 4) && (PINID<8) ){
 61c:	84 30       	cpi	r24, 0x04	; 4
 61e:	08 f0       	brcs	.+2      	; 0x622 <Dio_voidSetPinDirection+0x6>
 620:	72 c0       	rjmp	.+228    	; 0x706 <Dio_voidSetPinDirection+0xea>
 622:	68 30       	cpi	r22, 0x08	; 8
 624:	08 f0       	brcs	.+2      	; 0x628 <Dio_voidSetPinDirection+0xc>
 626:	6f c0       	rjmp	.+222    	; 0x706 <Dio_voidSetPinDirection+0xea>
		if(Direction == OUTPUT){
 628:	41 30       	cpi	r20, 0x01	; 1
 62a:	a1 f5       	brne	.+104    	; 0x694 <Dio_voidSetPinDirection+0x78>
			switch(PORTID)
 62c:	81 30       	cpi	r24, 0x01	; 1
 62e:	89 f0       	breq	.+34     	; 0x652 <Dio_voidSetPinDirection+0x36>
 630:	28 f0       	brcs	.+10     	; 0x63c <Dio_voidSetPinDirection+0x20>
 632:	82 30       	cpi	r24, 0x02	; 2
 634:	c9 f0       	breq	.+50     	; 0x668 <Dio_voidSetPinDirection+0x4c>
 636:	83 30       	cpi	r24, 0x03	; 3
 638:	11 f1       	breq	.+68     	; 0x67e <Dio_voidSetPinDirection+0x62>
 63a:	08 95       	ret
			{
				case PORT_A : SET_BIT(DDRA_REG,PINID); break;
 63c:	2a b3       	in	r18, 0x1a	; 26
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	02 c0       	rjmp	.+4      	; 0x648 <Dio_voidSetPinDirection+0x2c>
 644:	88 0f       	add	r24, r24
 646:	99 1f       	adc	r25, r25
 648:	6a 95       	dec	r22
 64a:	e2 f7       	brpl	.-8      	; 0x644 <Dio_voidSetPinDirection+0x28>
 64c:	82 2b       	or	r24, r18
 64e:	8a bb       	out	0x1a, r24	; 26
 650:	08 95       	ret
				case PORT_B : SET_BIT(DDRB_REG,PINID); break;
 652:	27 b3       	in	r18, 0x17	; 23
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	02 c0       	rjmp	.+4      	; 0x65e <Dio_voidSetPinDirection+0x42>
 65a:	88 0f       	add	r24, r24
 65c:	99 1f       	adc	r25, r25
 65e:	6a 95       	dec	r22
 660:	e2 f7       	brpl	.-8      	; 0x65a <Dio_voidSetPinDirection+0x3e>
 662:	82 2b       	or	r24, r18
 664:	87 bb       	out	0x17, r24	; 23
 666:	08 95       	ret
				case PORT_C : SET_BIT(DDRC_REG,PINID); break;
 668:	24 b3       	in	r18, 0x14	; 20
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	02 c0       	rjmp	.+4      	; 0x674 <Dio_voidSetPinDirection+0x58>
 670:	88 0f       	add	r24, r24
 672:	99 1f       	adc	r25, r25
 674:	6a 95       	dec	r22
 676:	e2 f7       	brpl	.-8      	; 0x670 <Dio_voidSetPinDirection+0x54>
 678:	82 2b       	or	r24, r18
 67a:	84 bb       	out	0x14, r24	; 20
 67c:	08 95       	ret
				case PORT_D : SET_BIT(DDRD_REG,PINID); break;
 67e:	21 b3       	in	r18, 0x11	; 17
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	02 c0       	rjmp	.+4      	; 0x68a <Dio_voidSetPinDirection+0x6e>
 686:	88 0f       	add	r24, r24
 688:	99 1f       	adc	r25, r25
 68a:	6a 95       	dec	r22
 68c:	e2 f7       	brpl	.-8      	; 0x686 <Dio_voidSetPinDirection+0x6a>
 68e:	82 2b       	or	r24, r18
 690:	81 bb       	out	0x11, r24	; 17
 692:	08 95       	ret
			}
		}
		else if(Direction == INPUT){
 694:	41 11       	cpse	r20, r1
 696:	37 c0       	rjmp	.+110    	; 0x706 <Dio_voidSetPinDirection+0xea>
			switch(PORTID)
 698:	81 30       	cpi	r24, 0x01	; 1
 69a:	91 f0       	breq	.+36     	; 0x6c0 <Dio_voidSetPinDirection+0xa4>
 69c:	28 f0       	brcs	.+10     	; 0x6a8 <Dio_voidSetPinDirection+0x8c>
 69e:	82 30       	cpi	r24, 0x02	; 2
 6a0:	d9 f0       	breq	.+54     	; 0x6d8 <Dio_voidSetPinDirection+0xbc>
 6a2:	83 30       	cpi	r24, 0x03	; 3
 6a4:	29 f1       	breq	.+74     	; 0x6f0 <Dio_voidSetPinDirection+0xd4>
 6a6:	08 95       	ret
			{
				case PORT_A : CLR_BIT(DDRA_REG,PINID); break;
 6a8:	2a b3       	in	r18, 0x1a	; 26
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <Dio_voidSetPinDirection+0x98>
 6b0:	88 0f       	add	r24, r24
 6b2:	99 1f       	adc	r25, r25
 6b4:	6a 95       	dec	r22
 6b6:	e2 f7       	brpl	.-8      	; 0x6b0 <Dio_voidSetPinDirection+0x94>
 6b8:	80 95       	com	r24
 6ba:	82 23       	and	r24, r18
 6bc:	8a bb       	out	0x1a, r24	; 26
 6be:	08 95       	ret
				case PORT_B : CLR_BIT(DDRB_REG,PINID); break;
 6c0:	27 b3       	in	r18, 0x17	; 23
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <Dio_voidSetPinDirection+0xb0>
 6c8:	88 0f       	add	r24, r24
 6ca:	99 1f       	adc	r25, r25
 6cc:	6a 95       	dec	r22
 6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <Dio_voidSetPinDirection+0xac>
 6d0:	80 95       	com	r24
 6d2:	82 23       	and	r24, r18
 6d4:	87 bb       	out	0x17, r24	; 23
 6d6:	08 95       	ret
				case PORT_C : CLR_BIT(DDRC_REG,PINID); break;
 6d8:	24 b3       	in	r18, 0x14	; 20
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	02 c0       	rjmp	.+4      	; 0x6e4 <Dio_voidSetPinDirection+0xc8>
 6e0:	88 0f       	add	r24, r24
 6e2:	99 1f       	adc	r25, r25
 6e4:	6a 95       	dec	r22
 6e6:	e2 f7       	brpl	.-8      	; 0x6e0 <Dio_voidSetPinDirection+0xc4>
 6e8:	80 95       	com	r24
 6ea:	82 23       	and	r24, r18
 6ec:	84 bb       	out	0x14, r24	; 20
 6ee:	08 95       	ret
				case PORT_D : CLR_BIT(DDRD_REG,PINID); break;
 6f0:	21 b3       	in	r18, 0x11	; 17
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	02 c0       	rjmp	.+4      	; 0x6fc <Dio_voidSetPinDirection+0xe0>
 6f8:	88 0f       	add	r24, r24
 6fa:	99 1f       	adc	r25, r25
 6fc:	6a 95       	dec	r22
 6fe:	e2 f7       	brpl	.-8      	; 0x6f8 <Dio_voidSetPinDirection+0xdc>
 700:	80 95       	com	r24
 702:	82 23       	and	r24, r18
 704:	81 bb       	out	0x11, r24	; 17
 706:	08 95       	ret

00000708 <Dio_voidSetPinValue>:
		}else{/* Direction Error */}
	}else{/* Error Out of Range */}
}

void Dio_voidSetPinValue(u8 PORTID, u8 PINID, u8 Value){
	if((PORTID< 4) && (PINID<8) ){
 708:	84 30       	cpi	r24, 0x04	; 4
 70a:	08 f0       	brcs	.+2      	; 0x70e <Dio_voidSetPinValue+0x6>
 70c:	72 c0       	rjmp	.+228    	; 0x7f2 <Dio_voidSetPinValue+0xea>
 70e:	68 30       	cpi	r22, 0x08	; 8
 710:	08 f0       	brcs	.+2      	; 0x714 <Dio_voidSetPinValue+0xc>
 712:	6f c0       	rjmp	.+222    	; 0x7f2 <Dio_voidSetPinValue+0xea>
		if(Value==HIGH){
 714:	41 30       	cpi	r20, 0x01	; 1
 716:	a1 f5       	brne	.+104    	; 0x780 <Dio_voidSetPinValue+0x78>
			switch(PORTID)
 718:	81 30       	cpi	r24, 0x01	; 1
 71a:	89 f0       	breq	.+34     	; 0x73e <Dio_voidSetPinValue+0x36>
 71c:	28 f0       	brcs	.+10     	; 0x728 <Dio_voidSetPinValue+0x20>
 71e:	82 30       	cpi	r24, 0x02	; 2
 720:	c9 f0       	breq	.+50     	; 0x754 <Dio_voidSetPinValue+0x4c>
 722:	83 30       	cpi	r24, 0x03	; 3
 724:	11 f1       	breq	.+68     	; 0x76a <Dio_voidSetPinValue+0x62>
 726:	08 95       	ret
			{
				case PORT_A : SET_BIT(PORTA_REG,PINID);break;
 728:	2b b3       	in	r18, 0x1b	; 27
 72a:	81 e0       	ldi	r24, 0x01	; 1
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	02 c0       	rjmp	.+4      	; 0x734 <Dio_voidSetPinValue+0x2c>
 730:	88 0f       	add	r24, r24
 732:	99 1f       	adc	r25, r25
 734:	6a 95       	dec	r22
 736:	e2 f7       	brpl	.-8      	; 0x730 <Dio_voidSetPinValue+0x28>
 738:	82 2b       	or	r24, r18
 73a:	8b bb       	out	0x1b, r24	; 27
 73c:	08 95       	ret
				case PORT_B : SET_BIT(PORTB_REG,PINID);break;
 73e:	28 b3       	in	r18, 0x18	; 24
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	02 c0       	rjmp	.+4      	; 0x74a <Dio_voidSetPinValue+0x42>
 746:	88 0f       	add	r24, r24
 748:	99 1f       	adc	r25, r25
 74a:	6a 95       	dec	r22
 74c:	e2 f7       	brpl	.-8      	; 0x746 <Dio_voidSetPinValue+0x3e>
 74e:	82 2b       	or	r24, r18
 750:	88 bb       	out	0x18, r24	; 24
 752:	08 95       	ret
				case PORT_C : SET_BIT(PORTC_REG,PINID);break;
 754:	25 b3       	in	r18, 0x15	; 21
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	02 c0       	rjmp	.+4      	; 0x760 <Dio_voidSetPinValue+0x58>
 75c:	88 0f       	add	r24, r24
 75e:	99 1f       	adc	r25, r25
 760:	6a 95       	dec	r22
 762:	e2 f7       	brpl	.-8      	; 0x75c <Dio_voidSetPinValue+0x54>
 764:	82 2b       	or	r24, r18
 766:	85 bb       	out	0x15, r24	; 21
 768:	08 95       	ret
				case PORT_D : SET_BIT(PORTD_REG,PINID);break;
 76a:	22 b3       	in	r18, 0x12	; 18
 76c:	81 e0       	ldi	r24, 0x01	; 1
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	02 c0       	rjmp	.+4      	; 0x776 <Dio_voidSetPinValue+0x6e>
 772:	88 0f       	add	r24, r24
 774:	99 1f       	adc	r25, r25
 776:	6a 95       	dec	r22
 778:	e2 f7       	brpl	.-8      	; 0x772 <Dio_voidSetPinValue+0x6a>
 77a:	82 2b       	or	r24, r18
 77c:	82 bb       	out	0x12, r24	; 18
 77e:	08 95       	ret
			}
		}else if(Value==LOW){
 780:	41 11       	cpse	r20, r1
 782:	37 c0       	rjmp	.+110    	; 0x7f2 <Dio_voidSetPinValue+0xea>
			switch(PORTID)
 784:	81 30       	cpi	r24, 0x01	; 1
 786:	91 f0       	breq	.+36     	; 0x7ac <Dio_voidSetPinValue+0xa4>
 788:	28 f0       	brcs	.+10     	; 0x794 <Dio_voidSetPinValue+0x8c>
 78a:	82 30       	cpi	r24, 0x02	; 2
 78c:	d9 f0       	breq	.+54     	; 0x7c4 <Dio_voidSetPinValue+0xbc>
 78e:	83 30       	cpi	r24, 0x03	; 3
 790:	29 f1       	breq	.+74     	; 0x7dc <Dio_voidSetPinValue+0xd4>
 792:	08 95       	ret
			{
				case PORT_A : CLR_BIT(PORTA_REG,PINID);break;
 794:	2b b3       	in	r18, 0x1b	; 27
 796:	81 e0       	ldi	r24, 0x01	; 1
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	02 c0       	rjmp	.+4      	; 0x7a0 <Dio_voidSetPinValue+0x98>
 79c:	88 0f       	add	r24, r24
 79e:	99 1f       	adc	r25, r25
 7a0:	6a 95       	dec	r22
 7a2:	e2 f7       	brpl	.-8      	; 0x79c <Dio_voidSetPinValue+0x94>
 7a4:	80 95       	com	r24
 7a6:	82 23       	and	r24, r18
 7a8:	8b bb       	out	0x1b, r24	; 27
 7aa:	08 95       	ret
				case PORT_B : CLR_BIT(PORTB_REG,PINID);break;
 7ac:	28 b3       	in	r18, 0x18	; 24
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <Dio_voidSetPinValue+0xb0>
 7b4:	88 0f       	add	r24, r24
 7b6:	99 1f       	adc	r25, r25
 7b8:	6a 95       	dec	r22
 7ba:	e2 f7       	brpl	.-8      	; 0x7b4 <Dio_voidSetPinValue+0xac>
 7bc:	80 95       	com	r24
 7be:	82 23       	and	r24, r18
 7c0:	88 bb       	out	0x18, r24	; 24
 7c2:	08 95       	ret
				case PORT_C : CLR_BIT(PORTC_REG,PINID);break;
 7c4:	25 b3       	in	r18, 0x15	; 21
 7c6:	81 e0       	ldi	r24, 0x01	; 1
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <Dio_voidSetPinValue+0xc8>
 7cc:	88 0f       	add	r24, r24
 7ce:	99 1f       	adc	r25, r25
 7d0:	6a 95       	dec	r22
 7d2:	e2 f7       	brpl	.-8      	; 0x7cc <Dio_voidSetPinValue+0xc4>
 7d4:	80 95       	com	r24
 7d6:	82 23       	and	r24, r18
 7d8:	85 bb       	out	0x15, r24	; 21
 7da:	08 95       	ret
				case PORT_D : CLR_BIT(PORTD_REG,PINID);break;
 7dc:	22 b3       	in	r18, 0x12	; 18
 7de:	81 e0       	ldi	r24, 0x01	; 1
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <Dio_voidSetPinValue+0xe0>
 7e4:	88 0f       	add	r24, r24
 7e6:	99 1f       	adc	r25, r25
 7e8:	6a 95       	dec	r22
 7ea:	e2 f7       	brpl	.-8      	; 0x7e4 <Dio_voidSetPinValue+0xdc>
 7ec:	80 95       	com	r24
 7ee:	82 23       	and	r24, r18
 7f0:	82 bb       	out	0x12, r24	; 18
 7f2:	08 95       	ret

000007f4 <Dio_u8GetPinValue>:
}

u8 Dio_u8GetPinValue(u8 PORTID, u8 PINID){
	//u8 Local_PinVal ;
	
	if((PORTID< 4) && (PINID<8) ){
 7f4:	84 30       	cpi	r24, 0x04	; 4
 7f6:	70 f5       	brcc	.+92     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 7f8:	68 30       	cpi	r22, 0x08	; 8
 7fa:	70 f5       	brcc	.+92     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
		switch(PORTID)
 7fc:	81 30       	cpi	r24, 0x01	; 1
 7fe:	79 f0       	breq	.+30     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 800:	28 f0       	brcs	.+10     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 802:	82 30       	cpi	r24, 0x02	; 2
 804:	a9 f0       	breq	.+42     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 806:	83 30       	cpi	r24, 0x03	; 3
 808:	e1 f0       	breq	.+56     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 80a:	28 c0       	rjmp	.+80     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
		{
			case PORT_A : return GET_BIT(PINA_REG,PINID);
 80c:	89 b3       	in	r24, 0x19	; 25
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	02 c0       	rjmp	.+4      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 812:	95 95       	asr	r25
 814:	87 95       	ror	r24
 816:	6a 95       	dec	r22
 818:	e2 f7       	brpl	.-8      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 81a:	81 70       	andi	r24, 0x01	; 1
 81c:	08 95       	ret
			case PORT_B : return GET_BIT(PINB_REG,PINID);
 81e:	86 b3       	in	r24, 0x16	; 22
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	02 c0       	rjmp	.+4      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 824:	95 95       	asr	r25
 826:	87 95       	ror	r24
 828:	6a 95       	dec	r22
 82a:	e2 f7       	brpl	.-8      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 82c:	81 70       	andi	r24, 0x01	; 1
 82e:	08 95       	ret
			case PORT_C : return GET_BIT(PINC_REG,PINID);
 830:	83 b3       	in	r24, 0x13	; 19
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	02 c0       	rjmp	.+4      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 836:	95 95       	asr	r25
 838:	87 95       	ror	r24
 83a:	6a 95       	dec	r22
 83c:	e2 f7       	brpl	.-8      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 83e:	81 70       	andi	r24, 0x01	; 1
 840:	08 95       	ret
			case PORT_D : return GET_BIT(PIND_REG,PINID);
 842:	80 b3       	in	r24, 0x10	; 16
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	02 c0       	rjmp	.+4      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 848:	95 95       	asr	r25
 84a:	87 95       	ror	r24
 84c:	6a 95       	dec	r22
 84e:	e2 f7       	brpl	.-8      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 850:	81 70       	andi	r24, 0x01	; 1
 852:	08 95       	ret
		}
	}else{/* Error out of range */ }
	return 0x55;
 854:	85 e5       	ldi	r24, 0x55	; 85
 856:	08 95       	ret
 858:	85 e5       	ldi	r24, 0x55	; 85
 85a:	08 95       	ret
 85c:	85 e5       	ldi	r24, 0x55	; 85
}
 85e:	08 95       	ret

00000860 <__vector_1>:
}

void __vector_1 (void) __attribute__((signal,used));

void __vector_1 (void) 
{
 860:	1f 92       	push	r1
 862:	0f 92       	push	r0
 864:	0f b6       	in	r0, 0x3f	; 63
 866:	0f 92       	push	r0
 868:	11 24       	eor	r1, r1
 86a:	2f 93       	push	r18
 86c:	3f 93       	push	r19
 86e:	4f 93       	push	r20
 870:	5f 93       	push	r21
 872:	6f 93       	push	r22
 874:	7f 93       	push	r23
 876:	8f 93       	push	r24
 878:	9f 93       	push	r25
 87a:	af 93       	push	r26
 87c:	bf 93       	push	r27
 87e:	ef 93       	push	r30
 880:	ff 93       	push	r31
	
	pf_exti0();
 882:	e0 91 75 00 	lds	r30, 0x0075	; 0x800075 <pf_exti0>
 886:	f0 91 76 00 	lds	r31, 0x0076	; 0x800076 <pf_exti0+0x1>
 88a:	09 95       	icall

}
 88c:	ff 91       	pop	r31
 88e:	ef 91       	pop	r30
 890:	bf 91       	pop	r27
 892:	af 91       	pop	r26
 894:	9f 91       	pop	r25
 896:	8f 91       	pop	r24
 898:	7f 91       	pop	r23
 89a:	6f 91       	pop	r22
 89c:	5f 91       	pop	r21
 89e:	4f 91       	pop	r20
 8a0:	3f 91       	pop	r19
 8a2:	2f 91       	pop	r18
 8a4:	0f 90       	pop	r0
 8a6:	0f be       	out	0x3f, r0	; 63
 8a8:	0f 90       	pop	r0
 8aa:	1f 90       	pop	r1
 8ac:	18 95       	reti

000008ae <init_inti1>:
		case I1_ANY:CLR_BIT(MCUCR,PIN1);
			 SET_BIT(MCUCR,PIN0);break;
		case I1_FALL:SET_BIT(MCUCR,PIN1);
			 CLR_BIT(MCUCR,PIN0);break;
		case I1_RISE:SET_BIT(MCUCR,PIN1);
			 SET_BIT(MCUCR,PIN0);break;
 8ae:	85 b7       	in	r24, 0x35	; 53
 8b0:	88 60       	ori	r24, 0x08	; 8
 8b2:	85 bf       	out	0x35, r24	; 53
 8b4:	85 b7       	in	r24, 0x35	; 53
 8b6:	84 60       	ori	r24, 0x04	; 4
 8b8:	85 bf       	out	0x35, r24	; 53
 8ba:	8a b7       	in	r24, 0x3a	; 58
 8bc:	80 64       	ori	r24, 0x40	; 64
 8be:	8a bf       	out	0x3a, r24	; 58
 8c0:	40 e0       	ldi	r20, 0x00	; 0
 8c2:	63 e0       	ldi	r22, 0x03	; 3
 8c4:	83 e0       	ldi	r24, 0x03	; 3
 8c6:	0e 94 0e 03 	call	0x61c	; 0x61c <Dio_voidSetPinDirection>
 8ca:	41 e0       	ldi	r20, 0x01	; 1
 8cc:	63 e0       	ldi	r22, 0x03	; 3
 8ce:	83 e0       	ldi	r24, 0x03	; 3
 8d0:	0e 94 84 03 	call	0x708	; 0x708 <Dio_voidSetPinValue>
 8d4:	08 95       	ret

000008d6 <EXTI1_en>:
 8d6:	8b b7       	in	r24, 0x3b	; 59
 8d8:	80 68       	ori	r24, 0x80	; 128
 8da:	8b bf       	out	0x3b, r24	; 59
 8dc:	08 95       	ret

000008de <callback_exti1>:
	}
}
//static *pointer;
void callback_exti1(void (*function_name)(void))
{
	if (function_name!= NULL)
 8de:	00 97       	sbiw	r24, 0x00	; 0
 8e0:	21 f0       	breq	.+8      	; 0x8ea <callback_exti1+0xc>
	{
			pf_exti1=function_name;
 8e2:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <pf_exti1+0x1>
 8e6:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <pf_exti1>
 8ea:	08 95       	ret

000008ec <__vector_2>:
}

void __vector_2 (void) __attribute__((signal,used));

void __vector_2 (void) 
{
 8ec:	1f 92       	push	r1
 8ee:	0f 92       	push	r0
 8f0:	0f b6       	in	r0, 0x3f	; 63
 8f2:	0f 92       	push	r0
 8f4:	11 24       	eor	r1, r1
 8f6:	2f 93       	push	r18
 8f8:	3f 93       	push	r19
 8fa:	4f 93       	push	r20
 8fc:	5f 93       	push	r21
 8fe:	6f 93       	push	r22
 900:	7f 93       	push	r23
 902:	8f 93       	push	r24
 904:	9f 93       	push	r25
 906:	af 93       	push	r26
 908:	bf 93       	push	r27
 90a:	ef 93       	push	r30
 90c:	ff 93       	push	r31
	
	pf_exti1();
 90e:	e0 91 77 00 	lds	r30, 0x0077	; 0x800077 <pf_exti1>
 912:	f0 91 78 00 	lds	r31, 0x0078	; 0x800078 <pf_exti1+0x1>
 916:	09 95       	icall

}
 918:	ff 91       	pop	r31
 91a:	ef 91       	pop	r30
 91c:	bf 91       	pop	r27
 91e:	af 91       	pop	r26
 920:	9f 91       	pop	r25
 922:	8f 91       	pop	r24
 924:	7f 91       	pop	r23
 926:	6f 91       	pop	r22
 928:	5f 91       	pop	r21
 92a:	4f 91       	pop	r20
 92c:	3f 91       	pop	r19
 92e:	2f 91       	pop	r18
 930:	0f 90       	pop	r0
 932:	0f be       	out	0x3f, r0	; 63
 934:	0f 90       	pop	r0
 936:	1f 90       	pop	r1
 938:	18 95       	reti

0000093a <gie_enable>:
#include "../../LIB/STD_TYPES.h"
#include "../../LIB/BIT_MATH.h"
#include "GIE_config.h"
#include "GIE_private.h"
void gie_enable(){
	SET_BIT(S_REG,7);
 93a:	8f b7       	in	r24, 0x3f	; 63
 93c:	80 68       	ori	r24, 0x80	; 128
 93e:	8f bf       	out	0x3f, r24	; 63
 940:	08 95       	ret

00000942 <init_timer>:

static void (*pf_tmr) (void);

void init_timer(u8 WGM_mode, u8 clock_select){
	
	SET_BIT(TIMSK_REG,TOIE0);
 942:	99 b7       	in	r25, 0x39	; 57
 944:	91 60       	ori	r25, 0x01	; 1
 946:	99 bf       	out	0x39, r25	; 57
	
	switch (WGM_mode)
 948:	81 30       	cpi	r24, 0x01	; 1
 94a:	69 f0       	breq	.+26     	; 0x966 <init_timer+0x24>
 94c:	28 f0       	brcs	.+10     	; 0x958 <init_timer+0x16>
 94e:	82 30       	cpi	r24, 0x02	; 2
 950:	89 f0       	breq	.+34     	; 0x974 <init_timer+0x32>
 952:	83 30       	cpi	r24, 0x03	; 3
 954:	b1 f0       	breq	.+44     	; 0x982 <init_timer+0x40>
 956:	1b c0       	rjmp	.+54     	; 0x98e <init_timer+0x4c>
	{
		case NORMAL:
			TCCR0_REG->TCCR0_WGM00=0;
 958:	83 b7       	in	r24, 0x33	; 51
 95a:	8f 7b       	andi	r24, 0xBF	; 191
 95c:	83 bf       	out	0x33, r24	; 51
			TCCR0_REG->TCCR0_WGM01=0;
 95e:	83 b7       	in	r24, 0x33	; 51
 960:	87 7f       	andi	r24, 0xF7	; 247
 962:	83 bf       	out	0x33, r24	; 51
			break;
 964:	14 c0       	rjmp	.+40     	; 0x98e <init_timer+0x4c>
		case PWM:
			TCCR0_REG->TCCR0_WGM00=1;
 966:	83 b7       	in	r24, 0x33	; 51
 968:	80 64       	ori	r24, 0x40	; 64
 96a:	83 bf       	out	0x33, r24	; 51
			TCCR0_REG->TCCR0_WGM01=0;
 96c:	83 b7       	in	r24, 0x33	; 51
 96e:	87 7f       	andi	r24, 0xF7	; 247
 970:	83 bf       	out	0x33, r24	; 51
			break;
 972:	0d c0       	rjmp	.+26     	; 0x98e <init_timer+0x4c>
		case CTC:
			TCCR0_REG->TCCR0_WGM00=0;
 974:	83 b7       	in	r24, 0x33	; 51
 976:	8f 7b       	andi	r24, 0xBF	; 191
 978:	83 bf       	out	0x33, r24	; 51
			TCCR0_REG->TCCR0_WGM01=1;
 97a:	83 b7       	in	r24, 0x33	; 51
 97c:	88 60       	ori	r24, 0x08	; 8
 97e:	83 bf       	out	0x33, r24	; 51
			break;
 980:	06 c0       	rjmp	.+12     	; 0x98e <init_timer+0x4c>
		case FAST_PWM:
			TCCR0_REG->TCCR0_WGM00=1;
 982:	83 b7       	in	r24, 0x33	; 51
 984:	80 64       	ori	r24, 0x40	; 64
 986:	83 bf       	out	0x33, r24	; 51
			TCCR0_REG->TCCR0_WGM01=1;
 988:	83 b7       	in	r24, 0x33	; 51
 98a:	88 60       	ori	r24, 0x08	; 8
 98c:	83 bf       	out	0x33, r24	; 51
			break;
	}
	

	switch(clock_select)
 98e:	86 2f       	mov	r24, r22
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	88 30       	cpi	r24, 0x08	; 8
 994:	91 05       	cpc	r25, r1
 996:	50 f5       	brcc	.+84     	; 0x9ec <init_timer+0xaa>
 998:	fc 01       	movw	r30, r24
 99a:	e6 5d       	subi	r30, 0xD6	; 214
 99c:	ff 4f       	sbci	r31, 0xFF	; 255
 99e:	0c 94 68 05 	jmp	0xad0	; 0xad0 <__tablejump2__>
	{
		case NO_CLOCK:
			TCCR0_REG->TCCR0_CS0=0;break;
 9a2:	83 b7       	in	r24, 0x33	; 51
 9a4:	88 7f       	andi	r24, 0xF8	; 248
 9a6:	83 bf       	out	0x33, r24	; 51
 9a8:	08 95       	ret
		case NO_PRS:
			TCCR0_REG->TCCR0_CS0=1;break;
 9aa:	83 b7       	in	r24, 0x33	; 51
 9ac:	88 7f       	andi	r24, 0xF8	; 248
 9ae:	81 60       	ori	r24, 0x01	; 1
 9b0:	83 bf       	out	0x33, r24	; 51
 9b2:	08 95       	ret
		case PRS8:
			TCCR0_REG->TCCR0_CS0=2;break;
 9b4:	83 b7       	in	r24, 0x33	; 51
 9b6:	88 7f       	andi	r24, 0xF8	; 248
 9b8:	82 60       	ori	r24, 0x02	; 2
 9ba:	83 bf       	out	0x33, r24	; 51
 9bc:	08 95       	ret
		case PRS64:
			TCCR0_REG->TCCR0_CS0=3;break;
 9be:	83 b7       	in	r24, 0x33	; 51
 9c0:	88 7f       	andi	r24, 0xF8	; 248
 9c2:	83 60       	ori	r24, 0x03	; 3
 9c4:	83 bf       	out	0x33, r24	; 51
 9c6:	08 95       	ret
		case PRS256:
			TCCR0_REG->TCCR0_CS0=4;break;
 9c8:	83 b7       	in	r24, 0x33	; 51
 9ca:	88 7f       	andi	r24, 0xF8	; 248
 9cc:	84 60       	ori	r24, 0x04	; 4
 9ce:	83 bf       	out	0x33, r24	; 51
 9d0:	08 95       	ret
		case PRS1024:
			TCCR0_REG->TCCR0_CS0=5;break;
 9d2:	83 b7       	in	r24, 0x33	; 51
 9d4:	88 7f       	andi	r24, 0xF8	; 248
 9d6:	85 60       	ori	r24, 0x05	; 5
 9d8:	83 bf       	out	0x33, r24	; 51
 9da:	08 95       	ret
		case EXT_CLK_F:
			TCCR0_REG->TCCR0_CS0=6;break;
 9dc:	83 b7       	in	r24, 0x33	; 51
 9de:	88 7f       	andi	r24, 0xF8	; 248
 9e0:	86 60       	ori	r24, 0x06	; 6
 9e2:	83 bf       	out	0x33, r24	; 51
 9e4:	08 95       	ret
		case EXT_CLK_R:
			TCCR0_REG->TCCR0_CS0=7;break;
 9e6:	83 b7       	in	r24, 0x33	; 51
 9e8:	87 60       	ori	r24, 0x07	; 7
 9ea:	83 bf       	out	0x33, r24	; 51
 9ec:	08 95       	ret

000009ee <Timer_stop>:
	/* ignore com01,com00	*/
}

void Timer_stop(){
	//CS02 CS01 CS00 => 000
	TCCR0_REG->TCCR0_CS0=NO_CLOCK;
 9ee:	83 b7       	in	r24, 0x33	; 51
 9f0:	88 7f       	andi	r24, 0xF8	; 248
 9f2:	83 bf       	out	0x33, r24	; 51
 9f4:	08 95       	ret

000009f6 <Timer_start>:
}

void Timer_start(u8 clock_select){
 9f6:	e8 2f       	mov	r30, r24
	SET_BIT(TIMSK_REG,TOIE0);
 9f8:	89 b7       	in	r24, 0x39	; 57
 9fa:	81 60       	ori	r24, 0x01	; 1
 9fc:	89 bf       	out	0x39, r24	; 57
	/* counter or timer? last three options in the table are for counter */
		switch(clock_select)
 9fe:	8e 2f       	mov	r24, r30
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	fc 01       	movw	r30, r24
 a04:	31 97       	sbiw	r30, 0x01	; 1
 a06:	e7 30       	cpi	r30, 0x07	; 7
 a08:	f1 05       	cpc	r31, r1
 a0a:	f8 f4       	brcc	.+62     	; 0xa4a <Timer_start+0x54>
 a0c:	ee 5c       	subi	r30, 0xCE	; 206
 a0e:	ff 4f       	sbci	r31, 0xFF	; 255
 a10:	0c 94 68 05 	jmp	0xad0	; 0xad0 <__tablejump2__>
		{
			case NO_PRS:
			TCCR0_REG->TCCR0_CS0=1;
 a14:	83 b7       	in	r24, 0x33	; 51
 a16:	88 7f       	andi	r24, 0xF8	; 248
 a18:	81 60       	ori	r24, 0x01	; 1
 a1a:	83 bf       	out	0x33, r24	; 51
			case PRS8:
			TCCR0_REG->TCCR0_CS0=2;
 a1c:	83 b7       	in	r24, 0x33	; 51
 a1e:	88 7f       	andi	r24, 0xF8	; 248
 a20:	82 60       	ori	r24, 0x02	; 2
 a22:	83 bf       	out	0x33, r24	; 51
			case PRS64:
			TCCR0_REG->TCCR0_CS0=3;
 a24:	83 b7       	in	r24, 0x33	; 51
 a26:	88 7f       	andi	r24, 0xF8	; 248
 a28:	83 60       	ori	r24, 0x03	; 3
 a2a:	83 bf       	out	0x33, r24	; 51
			case PRS256:
			TCCR0_REG->TCCR0_CS0=4;
 a2c:	83 b7       	in	r24, 0x33	; 51
 a2e:	88 7f       	andi	r24, 0xF8	; 248
 a30:	84 60       	ori	r24, 0x04	; 4
 a32:	83 bf       	out	0x33, r24	; 51
			case PRS1024:
			TCCR0_REG->TCCR0_CS0=5;
 a34:	83 b7       	in	r24, 0x33	; 51
 a36:	88 7f       	andi	r24, 0xF8	; 248
 a38:	85 60       	ori	r24, 0x05	; 5
 a3a:	83 bf       	out	0x33, r24	; 51
			case EXT_CLK_F:
			TCCR0_REG->TCCR0_CS0=6;
 a3c:	83 b7       	in	r24, 0x33	; 51
 a3e:	88 7f       	andi	r24, 0xF8	; 248
 a40:	86 60       	ori	r24, 0x06	; 6
 a42:	83 bf       	out	0x33, r24	; 51
			case EXT_CLK_R:
			TCCR0_REG->TCCR0_CS0=7;
 a44:	83 b7       	in	r24, 0x33	; 51
 a46:	87 60       	ori	r24, 0x07	; 7
 a48:	83 bf       	out	0x33, r24	; 51
 a4a:	08 95       	ret

00000a4c <callback_tmr>:
		}
}

void callback_tmr(void (*function_name)(void))
{
	if (function_name!= NULL)
 a4c:	00 97       	sbiw	r24, 0x00	; 0
 a4e:	21 f0       	breq	.+8      	; 0xa58 <callback_tmr+0xc>
	{
		pf_tmr=function_name;
 a50:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <pf_tmr+0x1>
 a54:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <pf_tmr>
 a58:	08 95       	ret

00000a5a <__vector_11>:
}

void __vector_11 (void) __attribute__((signal,used));

void __vector_11 (void)
{
 a5a:	1f 92       	push	r1
 a5c:	0f 92       	push	r0
 a5e:	0f b6       	in	r0, 0x3f	; 63
 a60:	0f 92       	push	r0
 a62:	11 24       	eor	r1, r1
 a64:	2f 93       	push	r18
 a66:	3f 93       	push	r19
 a68:	4f 93       	push	r20
 a6a:	5f 93       	push	r21
 a6c:	6f 93       	push	r22
 a6e:	7f 93       	push	r23
 a70:	8f 93       	push	r24
 a72:	9f 93       	push	r25
 a74:	af 93       	push	r26
 a76:	bf 93       	push	r27
 a78:	ef 93       	push	r30
 a7a:	ff 93       	push	r31
	
	pf_tmr();
 a7c:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <pf_tmr>
 a80:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <pf_tmr+0x1>
 a84:	09 95       	icall

 a86:	ff 91       	pop	r31
 a88:	ef 91       	pop	r30
 a8a:	bf 91       	pop	r27
 a8c:	af 91       	pop	r26
 a8e:	9f 91       	pop	r25
 a90:	8f 91       	pop	r24
 a92:	7f 91       	pop	r23
 a94:	6f 91       	pop	r22
 a96:	5f 91       	pop	r21
 a98:	4f 91       	pop	r20
 a9a:	3f 91       	pop	r19
 a9c:	2f 91       	pop	r18
 a9e:	0f 90       	pop	r0
 aa0:	0f be       	out	0x3f, r0	; 63
 aa2:	0f 90       	pop	r0
 aa4:	1f 90       	pop	r1
 aa6:	18 95       	reti

00000aa8 <__divmodhi4>:
 aa8:	97 fb       	bst	r25, 7
 aaa:	07 2e       	mov	r0, r23
 aac:	16 f4       	brtc	.+4      	; 0xab2 <__divmodhi4+0xa>
 aae:	00 94       	com	r0
 ab0:	07 d0       	rcall	.+14     	; 0xac0 <__divmodhi4_neg1>
 ab2:	77 fd       	sbrc	r23, 7
 ab4:	09 d0       	rcall	.+18     	; 0xac8 <__divmodhi4_neg2>
 ab6:	0e 94 6e 05 	call	0xadc	; 0xadc <__udivmodhi4>
 aba:	07 fc       	sbrc	r0, 7
 abc:	05 d0       	rcall	.+10     	; 0xac8 <__divmodhi4_neg2>
 abe:	3e f4       	brtc	.+14     	; 0xace <__divmodhi4_exit>

00000ac0 <__divmodhi4_neg1>:
 ac0:	90 95       	com	r25
 ac2:	81 95       	neg	r24
 ac4:	9f 4f       	sbci	r25, 0xFF	; 255
 ac6:	08 95       	ret

00000ac8 <__divmodhi4_neg2>:
 ac8:	70 95       	com	r23
 aca:	61 95       	neg	r22
 acc:	7f 4f       	sbci	r23, 0xFF	; 255

00000ace <__divmodhi4_exit>:
 ace:	08 95       	ret

00000ad0 <__tablejump2__>:
 ad0:	ee 0f       	add	r30, r30
 ad2:	ff 1f       	adc	r31, r31
 ad4:	05 90       	lpm	r0, Z+
 ad6:	f4 91       	lpm	r31, Z
 ad8:	e0 2d       	mov	r30, r0
 ada:	09 94       	ijmp

00000adc <__udivmodhi4>:
 adc:	aa 1b       	sub	r26, r26
 ade:	bb 1b       	sub	r27, r27
 ae0:	51 e1       	ldi	r21, 0x11	; 17
 ae2:	07 c0       	rjmp	.+14     	; 0xaf2 <__udivmodhi4_ep>

00000ae4 <__udivmodhi4_loop>:
 ae4:	aa 1f       	adc	r26, r26
 ae6:	bb 1f       	adc	r27, r27
 ae8:	a6 17       	cp	r26, r22
 aea:	b7 07       	cpc	r27, r23
 aec:	10 f0       	brcs	.+4      	; 0xaf2 <__udivmodhi4_ep>
 aee:	a6 1b       	sub	r26, r22
 af0:	b7 0b       	sbc	r27, r23

00000af2 <__udivmodhi4_ep>:
 af2:	88 1f       	adc	r24, r24
 af4:	99 1f       	adc	r25, r25
 af6:	5a 95       	dec	r21
 af8:	a9 f7       	brne	.-22     	; 0xae4 <__udivmodhi4_loop>
 afa:	80 95       	com	r24
 afc:	90 95       	com	r25
 afe:	bc 01       	movw	r22, r24
 b00:	cd 01       	movw	r24, r26
 b02:	08 95       	ret

00000b04 <_exit>:
 b04:	f8 94       	cli

00000b06 <__stop_program>:
 b06:	ff cf       	rjmp	.-2      	; 0xb06 <__stop_program>
